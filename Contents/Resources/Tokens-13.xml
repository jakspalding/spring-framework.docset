<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>MailAuthenticationException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.mail</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailAuthenticationException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailAuthenticationException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MailAuthenticationException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailAuthenticationException.html</Path>
    <Anchor>MailAuthenticationException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailAuthenticationException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MailAuthenticationException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailAuthenticationException.html</Path>
    <Anchor>MailAuthenticationException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailAuthenticationException(Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MailAuthenticationException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailAuthenticationException.html</Path>
    <Anchor>MailAuthenticationException(java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.mail</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MailException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailException.html</Path>
    <Anchor>MailException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MailException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailException.html</Path>
    <Anchor>MailException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailMessage</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.mail</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailMessage.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailParseException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.mail</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailParseException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailParseException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MailParseException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailParseException.html</Path>
    <Anchor>MailParseException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailParseException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MailParseException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailParseException.html</Path>
    <Anchor>MailParseException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailParseException(Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MailParseException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailParseException.html</Path>
    <Anchor>MailParseException(java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailPreparationException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.mail</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailPreparationException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailPreparationException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MailPreparationException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailPreparationException.html</Path>
    <Anchor>MailPreparationException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailPreparationException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MailPreparationException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailPreparationException.html</Path>
    <Anchor>MailPreparationException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailPreparationException(Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MailPreparationException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailPreparationException.html</Path>
    <Anchor>MailPreparationException(java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailSender</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.mail</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailSender.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailSendException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.mail</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailSendException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailSendException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MailSendException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailSendException.html</Path>
    <Anchor>MailSendException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailSendException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MailSendException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailSendException.html</Path>
    <Anchor>MailSendException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailSendException(String, Throwable, Map&amp;lt;Object, Exception&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>MailSendException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailSendException.html</Path>
    <Anchor>MailSendException(java.lang.String, java.lang.Throwable, java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MailSendException(Map&amp;lt;Object, Exception&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>MailSendException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/MailSendException.html</Path>
    <Anchor>MailSendException(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeAccessible(Field)</Name>
      <Type>clm</Type>
      <Scope>ReflectionUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/ReflectionUtils.html</Path>
    <Anchor>makeAccessible(java.lang.reflect.Field)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeAccessible(Method)</Name>
      <Type>clm</Type>
      <Scope>ReflectionUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/ReflectionUtils.html</Path>
    <Anchor>makeAccessible(java.lang.reflect.Method)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeAccessible(Constructor&amp;lt;?&amp;gt;)</Name>
      <Type>clm</Type>
      <Scope>ReflectionUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/ReflectionUtils.html</Path>
    <Anchor>makeAccessible(java.lang.reflect.Constructor)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeAdvisorChainAspectJCapableIfNecessary(List&amp;lt;Advisor&amp;gt;)</Name>
      <Type>clm</Type>
      <Scope>AspectJProxyUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/aspectj/AspectJProxyUtils.html</Path>
    <Anchor>makeAdvisorChainAspectJCapableIfNecessary(java.util.List)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makeObject()</Name>
      <Type>instm</Type>
      <Scope>CommonsPoolTargetSource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/target/CommonsPoolTargetSource.html</Path>
    <Anchor>makeObject()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makePersistent(T)</Name>
      <Type>intfm</Type>
      <Scope>JdoOperations</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/orm/jdo/JdoOperations.html</Path>
    <Anchor>makePersistent(T)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makePersistent(T)</Name>
      <Type>instm</Type>
      <Scope>JdoTemplate</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/orm/jdo/JdoTemplate.html</Path>
    <Anchor>makePersistent(T)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makePersistentAll(Collection&amp;lt;T&amp;gt;)</Name>
      <Type>intfm</Type>
      <Scope>JdoOperations</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/orm/jdo/JdoOperations.html</Path>
    <Anchor>makePersistentAll(java.util.Collection)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>makePersistentAll(Collection&amp;lt;T&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>JdoTemplate</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/orm/jdo/JdoTemplate.html</Path>
    <Anchor>makePersistentAll(java.util.Collection)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedArray</Name>
      <Type>cl</Type>
      <Scope>org.springframework.beans.factory.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedArray.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedArray(String, int)</Name>
      <Type>Constructor</Type>
      <Scope>ManagedArray</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedArray.html</Path>
    <Anchor>ManagedArray(java.lang.String, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedAttribute</Name>
      <Type>clm</Type>
      <Scope>org.springframework.jmx.export.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/annotation/ManagedAttribute.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedAttribute</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.export.metadata</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/metadata/ManagedAttribute.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedAttribute()</Name>
      <Type>Constructor</Type>
      <Scope>ManagedAttribute</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/metadata/ManagedAttribute.html</Path>
    <Anchor>ManagedAttribute()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedList</Name>
      <Type>cl</Type>
      <Scope>org.springframework.beans.factory.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedList.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedList()</Name>
      <Type>Constructor</Type>
      <Scope>ManagedList</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedList.html</Path>
    <Anchor>ManagedList()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedList(int)</Name>
      <Type>Constructor</Type>
      <Scope>ManagedList</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedList.html</Path>
    <Anchor>ManagedList(int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedMap</Name>
      <Type>cl</Type>
      <Scope>org.springframework.beans.factory.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedMap.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedMap()</Name>
      <Type>Constructor</Type>
      <Scope>ManagedMap</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedMap.html</Path>
    <Anchor>ManagedMap()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedMap(int)</Name>
      <Type>Constructor</Type>
      <Scope>ManagedMap</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedMap.html</Path>
    <Anchor>ManagedMap(int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedMetric</Name>
      <Type>clm</Type>
      <Scope>org.springframework.jmx.export.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/annotation/ManagedMetric.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedMetric</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.export.metadata</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/metadata/ManagedMetric.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedMetric()</Name>
      <Type>Constructor</Type>
      <Scope>ManagedMetric</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/metadata/ManagedMetric.html</Path>
    <Anchor>ManagedMetric()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedNotification</Name>
      <Type>clm</Type>
      <Scope>org.springframework.jmx.export.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/annotation/ManagedNotification.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedNotification</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.export.metadata</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/metadata/ManagedNotification.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedNotification()</Name>
      <Type>Constructor</Type>
      <Scope>ManagedNotification</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/metadata/ManagedNotification.html</Path>
    <Anchor>ManagedNotification()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedNotifications</Name>
      <Type>clm</Type>
      <Scope>org.springframework.jmx.export.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/annotation/ManagedNotifications.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedOperation</Name>
      <Type>clm</Type>
      <Scope>org.springframework.jmx.export.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/annotation/ManagedOperation.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedOperation</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.export.metadata</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/metadata/ManagedOperation.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedOperation()</Name>
      <Type>Constructor</Type>
      <Scope>ManagedOperation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/metadata/ManagedOperation.html</Path>
    <Anchor>ManagedOperation()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedOperationParameter</Name>
      <Type>clm</Type>
      <Scope>org.springframework.jmx.export.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/annotation/ManagedOperationParameter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedOperationParameter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.export.metadata</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/metadata/ManagedOperationParameter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedOperationParameter()</Name>
      <Type>Constructor</Type>
      <Scope>ManagedOperationParameter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/metadata/ManagedOperationParameter.html</Path>
    <Anchor>ManagedOperationParameter()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedOperationParameters</Name>
      <Type>clm</Type>
      <Scope>org.springframework.jmx.export.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/annotation/ManagedOperationParameters.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedProperties</Name>
      <Type>cl</Type>
      <Scope>org.springframework.beans.factory.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedProperties.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedProperties()</Name>
      <Type>Constructor</Type>
      <Scope>ManagedProperties</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedProperties.html</Path>
    <Anchor>ManagedProperties()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedResource</Name>
      <Type>clm</Type>
      <Scope>org.springframework.jmx.export.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/annotation/ManagedResource.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedResource</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.export.metadata</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/metadata/ManagedResource.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedResource()</Name>
      <Type>Constructor</Type>
      <Scope>ManagedResource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/metadata/ManagedResource.html</Path>
    <Anchor>ManagedResource()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedSet</Name>
      <Type>cl</Type>
      <Scope>org.springframework.beans.factory.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedSet.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedSet()</Name>
      <Type>Constructor</Type>
      <Scope>ManagedSet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedSet.html</Path>
    <Anchor>ManagedSet()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedSet(int)</Name>
      <Type>Constructor</Type>
      <Scope>ManagedSet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedSet.html</Path>
    <Anchor>ManagedSet(int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedTransactionAdapter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.transaction.jta</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/transaction/jta/ManagedTransactionAdapter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ManagedTransactionAdapter(TransactionManager)</Name>
      <Type>Constructor</Type>
      <Scope>ManagedTransactionAdapter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/transaction/jta/ManagedTransactionAdapter.html</Path>
    <Anchor>ManagedTransactionAdapter(javax.transaction.TransactionManager)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>map(Class&amp;lt;?&amp;gt;, TypeDescriptor, TypeDescriptor)</Name>
      <Type>clm</Type>
      <Scope>TypeDescriptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/convert/TypeDescriptor.html</Path>
    <Anchor>map(java.lang.Class, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MAP_ELEMENT</Name>
      <Type>Field</Type>
      <Scope>BeanDefinitionParserDelegate</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.html</Path>
    <Anchor>MAP_ELEMENT</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapAccessor</Name>
      <Type>cl</Type>
      <Scope>org.springframework.context.expression</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/expression/MapAccessor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapAccessor()</Name>
      <Type>Constructor</Type>
      <Scope>MapAccessor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/expression/MapAccessor.html</Path>
    <Anchor>MapAccessor()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapBindingResult</Name>
      <Type>cl</Type>
      <Scope>org.springframework.validation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/MapBindingResult.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapBindingResult(Map&amp;lt;?, ?&amp;gt;, String)</Name>
      <Type>Constructor</Type>
      <Scope>MapBindingResult</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/MapBindingResult.html</Path>
    <Anchor>MapBindingResult(java.util.Map, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapDataSourceLookup</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jdbc.datasource.lookup</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/datasource/lookup/MapDataSourceLookup.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapDataSourceLookup()</Name>
      <Type>Constructor</Type>
      <Scope>MapDataSourceLookup</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/datasource/lookup/MapDataSourceLookup.html</Path>
    <Anchor>MapDataSourceLookup()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapDataSourceLookup(Map&amp;lt;String, DataSource&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>MapDataSourceLookup</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/datasource/lookup/MapDataSourceLookup.html</Path>
    <Anchor>MapDataSourceLookup(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapDataSourceLookup(String, DataSource)</Name>
      <Type>Constructor</Type>
      <Scope>MapDataSourceLookup</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/datasource/lookup/MapDataSourceLookup.html</Path>
    <Anchor>MapDataSourceLookup(java.lang.String, javax.sql.DataSource)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapEntryKeys(Comparator&amp;lt;K&amp;gt;)</Name>
      <Type>clm</Type>
      <Scope>ConvertingComparator</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/convert/converter/ConvertingComparator.html</Path>
    <Anchor>mapEntryKeys(java.util.Comparator)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapEntryValues(Comparator&amp;lt;V&amp;gt;)</Name>
      <Type>clm</Type>
      <Scope>ConvertingComparator</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/convert/converter/ConvertingComparator.html</Path>
    <Anchor>mapEntryValues(java.util.Comparator)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapFactoryBean</Name>
      <Type>cl</Type>
      <Scope>org.springframework.beans.factory.config</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/config/MapFactoryBean.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapFactoryBean()</Name>
      <Type>Constructor</Type>
      <Scope>MapFactoryBean</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/config/MapFactoryBean.html</Path>
    <Anchor>MapFactoryBean()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapMethodProcessor</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.method.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/method/annotation/MapMethodProcessor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapMethodProcessor()</Name>
      <Type>Constructor</Type>
      <Scope>MapMethodProcessor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/method/annotation/MapMethodProcessor.html</Path>
    <Anchor>MapMethodProcessor()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappedInterceptor</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.servlet.handler</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/handler/MappedInterceptor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappedInterceptor(String[], HandlerInterceptor)</Name>
      <Type>Constructor</Type>
      <Scope>MappedInterceptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/handler/MappedInterceptor.html</Path>
    <Anchor>MappedInterceptor(java.lang.String[], org.springframework.web.servlet.HandlerInterceptor)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappedInterceptor(String[], String[], HandlerInterceptor)</Name>
      <Type>Constructor</Type>
      <Scope>MappedInterceptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/handler/MappedInterceptor.html</Path>
    <Anchor>MappedInterceptor(java.lang.String[], java.lang.String[], org.springframework.web.servlet.HandlerInterceptor)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappedInterceptor(String[], WebRequestInterceptor)</Name>
      <Type>Constructor</Type>
      <Scope>MappedInterceptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/handler/MappedInterceptor.html</Path>
    <Anchor>MappedInterceptor(java.lang.String[], org.springframework.web.context.request.WebRequestInterceptor)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappedInterceptor(String[], String[], WebRequestInterceptor)</Name>
      <Type>Constructor</Type>
      <Scope>MappedInterceptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/handler/MappedInterceptor.html</Path>
    <Anchor>MappedInterceptor(java.lang.String[], java.lang.String[], org.springframework.web.context.request.WebRequestInterceptor)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mappedName</Name>
      <Type>Field</Type>
      <Scope>CommonAnnotationBeanPostProcessor.LookupElement</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/annotation/CommonAnnotationBeanPostProcessor.LookupElement.html</Path>
    <Anchor>mappedName</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mappedObjectNames</Name>
      <Type>Field</Type>
      <Scope>NotificationListenerHolder</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/support/NotificationListenerHolder.html</Path>
    <Anchor>mappedObjectNames</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Mapping</Name>
      <Type>clm</Type>
      <Scope>org.springframework.web.bind.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/bind/annotation/Mapping.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingCommAreaOperation</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jca.cci.object</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jca/cci/object/MappingCommAreaOperation.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingCommAreaOperation()</Name>
      <Type>Constructor</Type>
      <Scope>MappingCommAreaOperation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jca/cci/object/MappingCommAreaOperation.html</Path>
    <Anchor>MappingCommAreaOperation()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingCommAreaOperation(ConnectionFactory, InteractionSpec)</Name>
      <Type>Constructor</Type>
      <Scope>MappingCommAreaOperation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jca/cci/object/MappingCommAreaOperation.html</Path>
    <Anchor>MappingCommAreaOperation(javax.resource.cci.ConnectionFactory, javax.resource.cci.InteractionSpec)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingDispatchActionSupport</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.struts</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/struts/MappingDispatchActionSupport.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingDispatchActionSupport()</Name>
      <Type>Constructor</Type>
      <Scope>MappingDispatchActionSupport</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/struts/MappingDispatchActionSupport.html</Path>
    <Anchor>MappingDispatchActionSupport()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingJackson2HttpMessageConverter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.http.converter.json</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingJackson2HttpMessageConverter()</Name>
      <Type>Constructor</Type>
      <Scope>MappingJackson2HttpMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.html</Path>
    <Anchor>MappingJackson2HttpMessageConverter()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingJackson2JsonView</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.servlet.view.json</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/view/json/MappingJackson2JsonView.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingJackson2JsonView()</Name>
      <Type>Constructor</Type>
      <Scope>MappingJackson2JsonView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/view/json/MappingJackson2JsonView.html</Path>
    <Anchor>MappingJackson2JsonView()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingJackson2MessageConverter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jms.support.converter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MappingJackson2MessageConverter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingJackson2MessageConverter()</Name>
      <Type>Constructor</Type>
      <Scope>MappingJackson2MessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MappingJackson2MessageConverter.html</Path>
    <Anchor>MappingJackson2MessageConverter()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingJacksonHttpMessageConverter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.http.converter.json</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingJacksonHttpMessageConverter()</Name>
      <Type>Constructor</Type>
      <Scope>MappingJacksonHttpMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.html</Path>
    <Anchor>MappingJacksonHttpMessageConverter()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingJacksonJsonView</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.servlet.view.json</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/view/json/MappingJacksonJsonView.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingJacksonJsonView()</Name>
      <Type>Constructor</Type>
      <Scope>MappingJacksonJsonView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/view/json/MappingJacksonJsonView.html</Path>
    <Anchor>MappingJacksonJsonView()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingJacksonMessageConverter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jms.support.converter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MappingJacksonMessageConverter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingJacksonMessageConverter()</Name>
      <Type>Constructor</Type>
      <Scope>MappingJacksonMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MappingJacksonMessageConverter.html</Path>
    <Anchor>MappingJacksonMessageConverter()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingMediaTypeFileExtensionResolver</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.accept</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/accept/MappingMediaTypeFileExtensionResolver.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingMediaTypeFileExtensionResolver(Map&amp;lt;String, MediaType&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>MappingMediaTypeFileExtensionResolver</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/accept/MappingMediaTypeFileExtensionResolver.html</Path>
    <Anchor>MappingMediaTypeFileExtensionResolver(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingRecordOperation</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jca.cci.object</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jca/cci/object/MappingRecordOperation.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingRecordOperation()</Name>
      <Type>Constructor</Type>
      <Scope>MappingRecordOperation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jca/cci/object/MappingRecordOperation.html</Path>
    <Anchor>MappingRecordOperation()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingRecordOperation(ConnectionFactory, InteractionSpec)</Name>
      <Type>Constructor</Type>
      <Scope>MappingRecordOperation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jca/cci/object/MappingRecordOperation.html</Path>
    <Anchor>MappingRecordOperation(javax.resource.cci.ConnectionFactory, javax.resource.cci.InteractionSpec)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingRecordOperation.RecordCreatorImpl</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jca.cci.object</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jca/cci/object/MappingRecordOperation.RecordCreatorImpl.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingRecordOperation.RecordCreatorImpl(Object)</Name>
      <Type>Constructor</Type>
      <Scope>MappingRecordOperation.RecordCreatorImpl</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jca/cci/object/MappingRecordOperation.RecordCreatorImpl.html</Path>
    <Anchor>MappingRecordOperation.RecordCreatorImpl(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingRecordOperation.RecordExtractorImpl</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jca.cci.object</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jca/cci/object/MappingRecordOperation.RecordExtractorImpl.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingRecordOperation.RecordExtractorImpl()</Name>
      <Type>Constructor</Type>
      <Scope>MappingRecordOperation.RecordExtractorImpl</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jca/cci/object/MappingRecordOperation.RecordExtractorImpl.html</Path>
    <Anchor>MappingRecordOperation.RecordExtractorImpl()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingSqlQuery</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jdbc.object</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/MappingSqlQuery.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingSqlQuery()</Name>
      <Type>Constructor</Type>
      <Scope>MappingSqlQuery</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/MappingSqlQuery.html</Path>
    <Anchor>MappingSqlQuery()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingSqlQuery(DataSource, String)</Name>
      <Type>Constructor</Type>
      <Scope>MappingSqlQuery</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/MappingSqlQuery.html</Path>
    <Anchor>MappingSqlQuery(javax.sql.DataSource, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingSqlQueryWithParameters</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jdbc.object</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/MappingSqlQueryWithParameters.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingSqlQueryWithParameters()</Name>
      <Type>Constructor</Type>
      <Scope>MappingSqlQueryWithParameters</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/MappingSqlQueryWithParameters.html</Path>
    <Anchor>MappingSqlQueryWithParameters()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingSqlQueryWithParameters(DataSource, String)</Name>
      <Type>Constructor</Type>
      <Scope>MappingSqlQueryWithParameters</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/MappingSqlQueryWithParameters.html</Path>
    <Anchor>MappingSqlQueryWithParameters(javax.sql.DataSource, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingSqlQueryWithParameters.RowMapperImpl</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jdbc.object</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/MappingSqlQueryWithParameters.RowMapperImpl.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MappingSqlQueryWithParameters.RowMapperImpl(Object[], Map)</Name>
      <Type>Constructor</Type>
      <Scope>MappingSqlQueryWithParameters.RowMapperImpl</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/MappingSqlQueryWithParameters.RowMapperImpl.html</Path>
    <Anchor>MappingSqlQueryWithParameters.RowMapperImpl(java.lang.Object[], java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapPropertySource</Name>
      <Type>cl</Type>
      <Scope>org.springframework.core.env</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/env/MapPropertySource.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapPropertySource(String, Map&amp;lt;String, Object&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>MapPropertySource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/env/MapPropertySource.html</Path>
    <Anchor>MapPropertySource(java.lang.String, java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapRow(ResultSet, int)</Name>
      <Type>instm</Type>
      <Scope>BeanPropertyRowMapper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/BeanPropertyRowMapper.html</Path>
    <Anchor>mapRow(java.sql.ResultSet, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapRow(ResultSet, int)</Name>
      <Type>instm</Type>
      <Scope>ColumnMapRowMapper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/ColumnMapRowMapper.html</Path>
    <Anchor>mapRow(java.sql.ResultSet, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapRow(ResultSet, int)</Name>
      <Type>intfm</Type>
      <Scope>RowMapper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/RowMapper.html</Path>
    <Anchor>mapRow(java.sql.ResultSet, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapRow(ResultSet, int)</Name>
      <Type>instm</Type>
      <Scope>SingleColumnRowMapper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/SingleColumnRowMapper.html</Path>
    <Anchor>mapRow(java.sql.ResultSet, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapRow(ResultSet, int, Object[], Map)</Name>
      <Type>instm</Type>
      <Scope>MappingSqlQuery</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/MappingSqlQuery.html</Path>
    <Anchor>mapRow(java.sql.ResultSet, int, java.lang.Object[], java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapRow(ResultSet, int)</Name>
      <Type>instm</Type>
      <Scope>MappingSqlQuery</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/MappingSqlQuery.html</Path>
    <Anchor>mapRow(java.sql.ResultSet, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapRow(ResultSet, int, Object[], Map)</Name>
      <Type>instm</Type>
      <Scope>MappingSqlQueryWithParameters</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/MappingSqlQueryWithParameters.html</Path>
    <Anchor>mapRow(java.sql.ResultSet, int, java.lang.Object[], java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapRow(ResultSet, int)</Name>
      <Type>instm</Type>
      <Scope>MappingSqlQueryWithParameters.RowMapperImpl</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/MappingSqlQueryWithParameters.RowMapperImpl.html</Path>
    <Anchor>mapRow(java.sql.ResultSet, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapRow(ResultSet, int)</Name>
      <Type>instm</Type>
      <Scope>SqlFunction</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/SqlFunction.html</Path>
    <Anchor>mapRow(java.sql.ResultSet, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapRow(ResultSet, int)</Name>
      <Type>instm</Type>
      <Scope>UpdatableSqlQuery.RowMapperImpl</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/object/UpdatableSqlQuery.RowMapperImpl.html</Path>
    <Anchor>mapRow(java.sql.ResultSet, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapSqlParameterSource</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jdbc.core.namedparam</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapSqlParameterSource()</Name>
      <Type>Constructor</Type>
      <Scope>MapSqlParameterSource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.html</Path>
    <Anchor>MapSqlParameterSource()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapSqlParameterSource(String, Object)</Name>
      <Type>Constructor</Type>
      <Scope>MapSqlParameterSource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.html</Path>
    <Anchor>MapSqlParameterSource(java.lang.String, java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MapSqlParameterSource(Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>MapSqlParameterSource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/namedparam/MapSqlParameterSource.html</Path>
    <Anchor>MapSqlParameterSource(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapToBytesMessage(Object, Session, ObjectMapper)</Name>
      <Type>instm</Type>
      <Scope>MappingJackson2MessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MappingJackson2MessageConverter.html</Path>
    <Anchor>mapToBytesMessage(java.lang.Object, javax.jms.Session, com.fasterxml.jackson.databind.ObjectMapper)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapToBytesMessage(Object, Session, ObjectMapper)</Name>
      <Type>instm</Type>
      <Scope>MappingJacksonMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MappingJacksonMessageConverter.html</Path>
    <Anchor>mapToBytesMessage(java.lang.Object, javax.jms.Session, org.codehaus.jackson.map.ObjectMapper)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapToMessage(Object, Session, ObjectMapper, MessageType)</Name>
      <Type>instm</Type>
      <Scope>MappingJackson2MessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MappingJackson2MessageConverter.html</Path>
    <Anchor>mapToMessage(java.lang.Object, javax.jms.Session, com.fasterxml.jackson.databind.ObjectMapper, org.springframework.jms.support.converter.MessageType)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapToMessage(Object, Session, ObjectMapper, MessageType)</Name>
      <Type>instm</Type>
      <Scope>MappingJacksonMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MappingJacksonMessageConverter.html</Path>
    <Anchor>mapToMessage(java.lang.Object, javax.jms.Session, org.codehaus.jackson.map.ObjectMapper, org.springframework.jms.support.converter.MessageType)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapToTextMessage(Object, Session, ObjectMapper)</Name>
      <Type>instm</Type>
      <Scope>MappingJackson2MessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MappingJackson2MessageConverter.html</Path>
    <Anchor>mapToTextMessage(java.lang.Object, javax.jms.Session, com.fasterxml.jackson.databind.ObjectMapper)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mapToTextMessage(Object, Session, ObjectMapper)</Name>
      <Type>instm</Type>
      <Scope>MappingJacksonMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MappingJacksonMessageConverter.html</Path>
    <Anchor>mapToTextMessage(java.lang.Object, javax.jms.Session, org.codehaus.jackson.map.ObjectMapper)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>markApplicationContextDirty()</Name>
      <Type>instm</Type>
      <Scope>TestContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/context/TestContext.html</Path>
    <Anchor>markApplicationContextDirty()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>markBeanAsCreated(String)</Name>
      <Type>instm</Type>
      <Scope>AbstractBeanFactory</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/AbstractBeanFactory.html</Path>
    <Anchor>markBeanAsCreated(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshal(Object, Result)</Name>
      <Type>instm</Type>
      <Scope>Jaxb2Marshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/jaxb/Jaxb2Marshaller.html</Path>
    <Anchor>marshal(java.lang.Object, javax.xml.transform.Result)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshal(Object, Result, MimeContainer)</Name>
      <Type>instm</Type>
      <Scope>Jaxb2Marshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/jaxb/Jaxb2Marshaller.html</Path>
    <Anchor>marshal(java.lang.Object, javax.xml.transform.Result, org.springframework.oxm.mime.MimeContainer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshal(Object, Result)</Name>
      <Type>intfm</Type>
      <Scope>Marshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/Marshaller.html</Path>
    <Anchor>marshal(java.lang.Object, javax.xml.transform.Result)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshal(Object, Result, MimeContainer)</Name>
      <Type>intfm</Type>
      <Scope>MimeMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/mime/MimeMarshaller.html</Path>
    <Anchor>marshal(java.lang.Object, javax.xml.transform.Result, org.springframework.oxm.mime.MimeContainer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshal(Object, Result)</Name>
      <Type>instm</Type>
      <Scope>AbstractMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/AbstractMarshaller.html</Path>
    <Anchor>marshal(java.lang.Object, javax.xml.transform.Result)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalDomNode(Object, Node)</Name>
      <Type>instm</Type>
      <Scope>CastorMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/castor/CastorMarshaller.html</Path>
    <Anchor>marshalDomNode(java.lang.Object, org.w3c.dom.Node)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalDomNode(Object, Node)</Name>
      <Type>instm</Type>
      <Scope>JibxMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/jibx/JibxMarshaller.html</Path>
    <Anchor>marshalDomNode(java.lang.Object, org.w3c.dom.Node)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalDomNode(Object, Node)</Name>
      <Type>instm</Type>
      <Scope>AbstractMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/AbstractMarshaller.html</Path>
    <Anchor>marshalDomNode(java.lang.Object, org.w3c.dom.Node)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalDomNode(Object, Node)</Name>
      <Type>instm</Type>
      <Scope>XmlBeansMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/xmlbeans/XmlBeansMarshaller.html</Path>
    <Anchor>marshalDomNode(java.lang.Object, org.w3c.dom.Node)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalDomNode(Object, Node)</Name>
      <Type>instm</Type>
      <Scope>XStreamMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/xstream/XStreamMarshaller.html</Path>
    <Anchor>marshalDomNode(java.lang.Object, org.w3c.dom.Node)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalDomResult(Object, DOMResult)</Name>
      <Type>instm</Type>
      <Scope>AbstractMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/AbstractMarshaller.html</Path>
    <Anchor>marshalDomResult(java.lang.Object, javax.xml.transform.dom.DOMResult)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Marshaller</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.oxm</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/Marshaller.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.oxm</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/MarshallingException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/MarshallingException.html</Path>
    <Anchor>MarshallingException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/MarshallingException.html</Path>
    <Anchor>MarshallingException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingFailureException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.oxm</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/MarshallingFailureException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingFailureException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingFailureException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/MarshallingFailureException.html</Path>
    <Anchor>MarshallingFailureException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingFailureException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingFailureException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/MarshallingFailureException.html</Path>
    <Anchor>MarshallingFailureException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingHttpMessageConverter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.http.converter.xml</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/converter/xml/MarshallingHttpMessageConverter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingHttpMessageConverter()</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingHttpMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/converter/xml/MarshallingHttpMessageConverter.html</Path>
    <Anchor>MarshallingHttpMessageConverter()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingHttpMessageConverter(Marshaller)</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingHttpMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/converter/xml/MarshallingHttpMessageConverter.html</Path>
    <Anchor>MarshallingHttpMessageConverter(org.springframework.oxm.Marshaller)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingHttpMessageConverter(Marshaller, Unmarshaller)</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingHttpMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/converter/xml/MarshallingHttpMessageConverter.html</Path>
    <Anchor>MarshallingHttpMessageConverter(org.springframework.oxm.Marshaller, org.springframework.oxm.Unmarshaller)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingMessageConverter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jms.support.converter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MarshallingMessageConverter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingMessageConverter()</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MarshallingMessageConverter.html</Path>
    <Anchor>MarshallingMessageConverter()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingMessageConverter(Marshaller)</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MarshallingMessageConverter.html</Path>
    <Anchor>MarshallingMessageConverter(org.springframework.oxm.Marshaller)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingMessageConverter(Marshaller, Unmarshaller)</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MarshallingMessageConverter.html</Path>
    <Anchor>MarshallingMessageConverter(org.springframework.oxm.Marshaller, org.springframework.oxm.Unmarshaller)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingSource</Name>
      <Type>cl</Type>
      <Scope>org.springframework.oxm.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/MarshallingSource.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingSource(Marshaller, Object)</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingSource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/MarshallingSource.html</Path>
    <Anchor>MarshallingSource(org.springframework.oxm.Marshaller, java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingView</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.servlet.view.xml</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/view/xml/MarshallingView.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingView()</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/view/xml/MarshallingView.html</Path>
    <Anchor>MarshallingView()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MarshallingView(Marshaller)</Name>
      <Type>Constructor</Type>
      <Scope>MarshallingView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/view/xml/MarshallingView.html</Path>
    <Anchor>MarshallingView(org.springframework.oxm.Marshaller)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalOutputStream(Object, OutputStream)</Name>
      <Type>instm</Type>
      <Scope>CastorMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/castor/CastorMarshaller.html</Path>
    <Anchor>marshalOutputStream(java.lang.Object, java.io.OutputStream)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalOutputStream(Object, OutputStream)</Name>
      <Type>instm</Type>
      <Scope>JibxMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/jibx/JibxMarshaller.html</Path>
    <Anchor>marshalOutputStream(java.lang.Object, java.io.OutputStream)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalOutputStream(Object, OutputStream)</Name>
      <Type>instm</Type>
      <Scope>AbstractMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/AbstractMarshaller.html</Path>
    <Anchor>marshalOutputStream(java.lang.Object, java.io.OutputStream)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalOutputStream(Object, OutputStream)</Name>
      <Type>instm</Type>
      <Scope>XmlBeansMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/xmlbeans/XmlBeansMarshaller.html</Path>
    <Anchor>marshalOutputStream(java.lang.Object, java.io.OutputStream)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalOutputStream(Object, OutputStream)</Name>
      <Type>instm</Type>
      <Scope>XStreamMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/xstream/XStreamMarshaller.html</Path>
    <Anchor>marshalOutputStream(java.lang.Object, java.io.OutputStream)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalSaxHandlers(Object, ContentHandler, LexicalHandler)</Name>
      <Type>instm</Type>
      <Scope>CastorMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/castor/CastorMarshaller.html</Path>
    <Anchor>marshalSaxHandlers(java.lang.Object, org.xml.sax.ContentHandler, org.xml.sax.ext.LexicalHandler)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalSaxHandlers(Object, ContentHandler, LexicalHandler)</Name>
      <Type>instm</Type>
      <Scope>JibxMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/jibx/JibxMarshaller.html</Path>
    <Anchor>marshalSaxHandlers(java.lang.Object, org.xml.sax.ContentHandler, org.xml.sax.ext.LexicalHandler)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalSaxHandlers(Object, ContentHandler, LexicalHandler)</Name>
      <Type>instm</Type>
      <Scope>AbstractMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/AbstractMarshaller.html</Path>
    <Anchor>marshalSaxHandlers(java.lang.Object, org.xml.sax.ContentHandler, org.xml.sax.ext.LexicalHandler)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalSaxHandlers(Object, ContentHandler, LexicalHandler)</Name>
      <Type>instm</Type>
      <Scope>XmlBeansMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/xmlbeans/XmlBeansMarshaller.html</Path>
    <Anchor>marshalSaxHandlers(java.lang.Object, org.xml.sax.ContentHandler, org.xml.sax.ext.LexicalHandler)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalSaxHandlers(Object, ContentHandler, LexicalHandler)</Name>
      <Type>instm</Type>
      <Scope>XStreamMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/xstream/XStreamMarshaller.html</Path>
    <Anchor>marshalSaxHandlers(java.lang.Object, org.xml.sax.ContentHandler, org.xml.sax.ext.LexicalHandler)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalSaxResult(Object, SAXResult)</Name>
      <Type>instm</Type>
      <Scope>AbstractMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/AbstractMarshaller.html</Path>
    <Anchor>marshalSaxResult(java.lang.Object, javax.xml.transform.sax.SAXResult)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalStaxResult(Object, Result)</Name>
      <Type>instm</Type>
      <Scope>AbstractMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/AbstractMarshaller.html</Path>
    <Anchor>marshalStaxResult(java.lang.Object, javax.xml.transform.Result)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalStreamResult(Object, StreamResult)</Name>
      <Type>instm</Type>
      <Scope>AbstractMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/AbstractMarshaller.html</Path>
    <Anchor>marshalStreamResult(java.lang.Object, javax.xml.transform.stream.StreamResult)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalToBytesMessage(Object, Session, Marshaller)</Name>
      <Type>instm</Type>
      <Scope>MarshallingMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MarshallingMessageConverter.html</Path>
    <Anchor>marshalToBytesMessage(java.lang.Object, javax.jms.Session, org.springframework.oxm.Marshaller)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalToMessage(Object, Session, Marshaller, MessageType)</Name>
      <Type>instm</Type>
      <Scope>MarshallingMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MarshallingMessageConverter.html</Path>
    <Anchor>marshalToMessage(java.lang.Object, javax.jms.Session, org.springframework.oxm.Marshaller, org.springframework.jms.support.converter.MessageType)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalToTextMessage(Object, Session, Marshaller)</Name>
      <Type>instm</Type>
      <Scope>MarshallingMessageConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MarshallingMessageConverter.html</Path>
    <Anchor>marshalToTextMessage(java.lang.Object, javax.jms.Session, org.springframework.oxm.Marshaller)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalWriter(Object, Writer)</Name>
      <Type>instm</Type>
      <Scope>CastorMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/castor/CastorMarshaller.html</Path>
    <Anchor>marshalWriter(java.lang.Object, java.io.Writer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalWriter(Object, Writer)</Name>
      <Type>instm</Type>
      <Scope>JibxMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/jibx/JibxMarshaller.html</Path>
    <Anchor>marshalWriter(java.lang.Object, java.io.Writer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalWriter(Object, Writer)</Name>
      <Type>instm</Type>
      <Scope>AbstractMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/AbstractMarshaller.html</Path>
    <Anchor>marshalWriter(java.lang.Object, java.io.Writer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalWriter(Object, Writer)</Name>
      <Type>instm</Type>
      <Scope>XmlBeansMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/xmlbeans/XmlBeansMarshaller.html</Path>
    <Anchor>marshalWriter(java.lang.Object, java.io.Writer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalWriter(Object, Writer)</Name>
      <Type>instm</Type>
      <Scope>XStreamMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/xstream/XStreamMarshaller.html</Path>
    <Anchor>marshalWriter(java.lang.Object, java.io.Writer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalXmlEventWriter(Object, XMLEventWriter)</Name>
      <Type>instm</Type>
      <Scope>CastorMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/castor/CastorMarshaller.html</Path>
    <Anchor>marshalXmlEventWriter(java.lang.Object, javax.xml.stream.XMLEventWriter)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalXmlEventWriter(Object, XMLEventWriter)</Name>
      <Type>instm</Type>
      <Scope>JibxMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/jibx/JibxMarshaller.html</Path>
    <Anchor>marshalXmlEventWriter(java.lang.Object, javax.xml.stream.XMLEventWriter)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalXmlEventWriter(Object, XMLEventWriter)</Name>
      <Type>instm</Type>
      <Scope>AbstractMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/AbstractMarshaller.html</Path>
    <Anchor>marshalXmlEventWriter(java.lang.Object, javax.xml.stream.XMLEventWriter)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalXmlEventWriter(Object, XMLEventWriter)</Name>
      <Type>instm</Type>
      <Scope>XmlBeansMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/xmlbeans/XmlBeansMarshaller.html</Path>
    <Anchor>marshalXmlEventWriter(java.lang.Object, javax.xml.stream.XMLEventWriter)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalXmlEventWriter(Object, XMLEventWriter)</Name>
      <Type>instm</Type>
      <Scope>XStreamMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/xstream/XStreamMarshaller.html</Path>
    <Anchor>marshalXmlEventWriter(java.lang.Object, javax.xml.stream.XMLEventWriter)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalXmlStreamWriter(Object, XMLStreamWriter)</Name>
      <Type>instm</Type>
      <Scope>CastorMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/castor/CastorMarshaller.html</Path>
    <Anchor>marshalXmlStreamWriter(java.lang.Object, javax.xml.stream.XMLStreamWriter)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalXmlStreamWriter(Object, XMLStreamWriter)</Name>
      <Type>instm</Type>
      <Scope>JibxMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/jibx/JibxMarshaller.html</Path>
    <Anchor>marshalXmlStreamWriter(java.lang.Object, javax.xml.stream.XMLStreamWriter)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalXmlStreamWriter(Object, XMLStreamWriter)</Name>
      <Type>instm</Type>
      <Scope>AbstractMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/support/AbstractMarshaller.html</Path>
    <Anchor>marshalXmlStreamWriter(java.lang.Object, javax.xml.stream.XMLStreamWriter)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalXmlStreamWriter(Object, XMLStreamWriter)</Name>
      <Type>instm</Type>
      <Scope>XmlBeansMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/xmlbeans/XmlBeansMarshaller.html</Path>
    <Anchor>marshalXmlStreamWriter(java.lang.Object, javax.xml.stream.XMLStreamWriter)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>marshalXmlStreamWriter(Object, XMLStreamWriter)</Name>
      <Type>instm</Type>
      <Scope>XStreamMarshaller</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/xstream/XStreamMarshaller.html</Path>
    <Anchor>marshalXmlStreamWriter(java.lang.Object, javax.xml.stream.XMLStreamWriter)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>match(MetadataReader, MetadataReaderFactory)</Name>
      <Type>instm</Type>
      <Scope>AbstractClassTestingTypeFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AbstractClassTestingTypeFilter.html</Path>
    <Anchor>match(org.springframework.core.type.classreading.MetadataReader, org.springframework.core.type.classreading.MetadataReaderFactory)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>match(ClassMetadata)</Name>
      <Type>instm</Type>
      <Scope>AbstractClassTestingTypeFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AbstractClassTestingTypeFilter.html</Path>
    <Anchor>match(org.springframework.core.type.ClassMetadata)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>match(MetadataReader, MetadataReaderFactory)</Name>
      <Type>instm</Type>
      <Scope>AbstractTypeHierarchyTraversingFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AbstractTypeHierarchyTraversingFilter.html</Path>
    <Anchor>match(org.springframework.core.type.classreading.MetadataReader, org.springframework.core.type.classreading.MetadataReaderFactory)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>match(MetadataReader, MetadataReaderFactory)</Name>
      <Type>instm</Type>
      <Scope>AspectJTypeFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AspectJTypeFilter.html</Path>
    <Anchor>match(org.springframework.core.type.classreading.MetadataReader, org.springframework.core.type.classreading.MetadataReaderFactory)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>match(ClassMetadata)</Name>
      <Type>instm</Type>
      <Scope>RegexPatternTypeFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/RegexPatternTypeFilter.html</Path>
    <Anchor>match(org.springframework.core.type.ClassMetadata)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>match(MetadataReader, MetadataReaderFactory)</Name>
      <Type>intfm</Type>
      <Scope>TypeFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/TypeFilter.html</Path>
    <Anchor>match(org.springframework.core.type.classreading.MetadataReader, org.springframework.core.type.classreading.MetadataReaderFactory)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>match(ClientHttpRequest)</Name>
      <Type>intfm</Type>
      <Scope>RequestMatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/client/RequestMatcher.html</Path>
    <Anchor>match(org.springframework.http.client.ClientHttpRequest)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>match(MvcResult)</Name>
      <Type>intfm</Type>
      <Scope>ResultMatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/ResultMatcher.html</Path>
    <Anchor>match(org.springframework.test.web.servlet.MvcResult)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>match(String, String)</Name>
      <Type>instm</Type>
      <Scope>AntPathMatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/AntPathMatcher.html</Path>
    <Anchor>match(java.lang.String, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>match(String, String)</Name>
      <Type>intfm</Type>
      <Scope>PathMatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/PathMatcher.html</Path>
    <Anchor>match(java.lang.String, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>match(PortletRequest)</Name>
      <Type>intfm</Type>
      <Scope>AbstractMapBasedHandlerMapping.PortletRequestMappingPredicate</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/handler/AbstractMapBasedHandlerMapping.PortletRequestMappingPredicate.html</Path>
    <Anchor>match(javax.portlet.PortletRequest)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>match(String)</Name>
      <Type>instm</Type>
      <Scope>UriTemplate</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/util/UriTemplate.html</Path>
    <Anchor>match(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MatchAlwaysTransactionAttributeSource</Name>
      <Type>cl</Type>
      <Scope>org.springframework.transaction.interceptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/transaction/interceptor/MatchAlwaysTransactionAttributeSource.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MatchAlwaysTransactionAttributeSource()</Name>
      <Type>Constructor</Type>
      <Scope>MatchAlwaysTransactionAttributeSource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/transaction/interceptor/MatchAlwaysTransactionAttributeSource.html</Path>
    <Anchor>MatchAlwaysTransactionAttributeSource()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchClassName(String)</Name>
      <Type>instm</Type>
      <Scope>AbstractTypeHierarchyTraversingFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AbstractTypeHierarchyTraversingFilter.html</Path>
    <Anchor>matchClassName(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchClassName(String)</Name>
      <Type>instm</Type>
      <Scope>AssignableTypeFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AssignableTypeFilter.html</Path>
    <Anchor>matchClassName(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MatcherAssertionErrors</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.util</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/util/MatcherAssertionErrors.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Class)</Name>
      <Type>instm</Type>
      <Scope>AspectJExpressionPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/aspectj/AspectJExpressionPointcut.html</Path>
    <Anchor>matches(java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class, boolean)</Name>
      <Type>instm</Type>
      <Scope>AspectJExpressionPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/aspectj/AspectJExpressionPointcut.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class, boolean)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class)</Name>
      <Type>instm</Type>
      <Scope>AspectJExpressionPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/aspectj/AspectJExpressionPointcut.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class, Object[])</Name>
      <Type>instm</Type>
      <Scope>AspectJExpressionPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/aspectj/AspectJExpressionPointcut.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class, java.lang.Object[])</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Class)</Name>
      <Type>instm</Type>
      <Scope>TypePatternClassFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/aspectj/TypePatternClassFilter.html</Path>
    <Anchor>matches(java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Class&amp;lt;?&amp;gt;)</Name>
      <Type>intfm</Type>
      <Scope>ClassFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/ClassFilter.html</Path>
    <Anchor>matches(java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class, boolean)</Name>
      <Type>intfm</Type>
      <Scope>IntroductionAwareMethodMatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/IntroductionAwareMethodMatcher.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class, boolean)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class&amp;lt;?&amp;gt;)</Name>
      <Type>intfm</Type>
      <Scope>MethodMatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/MethodMatcher.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class&amp;lt;?&amp;gt;, Object[])</Name>
      <Type>intfm</Type>
      <Scope>MethodMatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/MethodMatcher.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class, java.lang.Object[])</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class)</Name>
      <Type>instm</Type>
      <Scope>AbstractRegexpMethodPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/AbstractRegexpMethodPointcut.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(String, int)</Name>
      <Type>instm</Type>
      <Scope>AbstractRegexpMethodPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/AbstractRegexpMethodPointcut.html</Path>
    <Anchor>matches(java.lang.String, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Class)</Name>
      <Type>instm</Type>
      <Scope>AnnotationClassFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/annotation/AnnotationClassFilter.html</Path>
    <Anchor>matches(java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class)</Name>
      <Type>instm</Type>
      <Scope>AnnotationMethodMatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/annotation/AnnotationMethodMatcher.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Class)</Name>
      <Type>instm</Type>
      <Scope>ControlFlowPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/ControlFlowPointcut.html</Path>
    <Anchor>matches(java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class)</Name>
      <Type>instm</Type>
      <Scope>ControlFlowPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/ControlFlowPointcut.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class, Object[])</Name>
      <Type>instm</Type>
      <Scope>ControlFlowPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/ControlFlowPointcut.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class, java.lang.Object[])</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Class)</Name>
      <Type>instm</Type>
      <Scope>DefaultIntroductionAdvisor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/DefaultIntroductionAdvisor.html</Path>
    <Anchor>matches(java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class&amp;lt;?&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>DynamicMethodMatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/DynamicMethodMatcher.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(String, int)</Name>
      <Type>instm</Type>
      <Scope>JdkRegexpMethodPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/JdkRegexpMethodPointcut.html</Path>
    <Anchor>matches(java.lang.String, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(MethodMatcher, Method, Class, boolean)</Name>
      <Type>clm</Type>
      <Scope>MethodMatchers</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/MethodMatchers.html</Path>
    <Anchor>matches(org.springframework.aop.MethodMatcher, java.lang.reflect.Method, java.lang.Class, boolean)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class)</Name>
      <Type>instm</Type>
      <Scope>NameMatchMethodPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/NameMatchMethodPointcut.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Pointcut, Method, Class, Object[])</Name>
      <Type>clm</Type>
      <Scope>Pointcuts</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/Pointcuts.html</Path>
    <Anchor>matches(org.springframework.aop.Pointcut, java.lang.reflect.Method, java.lang.Class, java.lang.Object[])</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Class)</Name>
      <Type>instm</Type>
      <Scope>RootClassFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/RootClassFilter.html</Path>
    <Anchor>matches(java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method, Class&amp;lt;?&amp;gt;, Object[])</Name>
      <Type>instm</Type>
      <Scope>StaticMethodMatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/StaticMethodMatcher.html</Path>
    <Anchor>matches(java.lang.reflect.Method, java.lang.Class, java.lang.Object[])</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method)</Name>
      <Type>instm</Type>
      <Scope>LookupOverride</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/LookupOverride.html</Path>
    <Anchor>matches(java.lang.reflect.Method)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method)</Name>
      <Type>instm</Type>
      <Scope>MethodOverride</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/MethodOverride.html</Path>
    <Anchor>matches(java.lang.reflect.Method)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method)</Name>
      <Type>instm</Type>
      <Scope>ReplaceOverride</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ReplaceOverride.html</Path>
    <Anchor>matches(java.lang.reflect.Method)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(TypeDescriptor, TypeDescriptor)</Name>
      <Type>intfm</Type>
      <Scope>ConditionalConverter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/convert/converter/ConditionalConverter.html</Path>
    <Anchor>matches(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Field)</Name>
      <Type>intfm</Type>
      <Scope>ReflectionUtils.FieldFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/ReflectionUtils.FieldFilter.html</Path>
    <Anchor>matches(java.lang.reflect.Field)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(Method)</Name>
      <Type>intfm</Type>
      <Scope>ReflectionUtils.MethodFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/ReflectionUtils.MethodFilter.html</Path>
    <Anchor>matches(java.lang.reflect.Method)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(String, PathMatcher)</Name>
      <Type>instm</Type>
      <Scope>MappedInterceptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/handler/MappedInterceptor.html</Path>
    <Anchor>matches(java.lang.String, org.springframework.util.PathMatcher)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matches(String)</Name>
      <Type>instm</Type>
      <Scope>UriTemplate</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/util/UriTemplate.html</Path>
    <Anchor>matches(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchesBeanName(String, String)</Name>
      <Type>instm</Type>
      <Scope>DefaultListableBeanFactory</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/DefaultListableBeanFactory.html</Path>
    <Anchor>matchesBeanName(java.lang.String, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchesExclusion(String, int)</Name>
      <Type>instm</Type>
      <Scope>AbstractRegexpMethodPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/AbstractRegexpMethodPointcut.html</Path>
    <Anchor>matchesExclusion(java.lang.String, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchesExclusion(String, int)</Name>
      <Type>instm</Type>
      <Scope>JdkRegexpMethodPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/JdkRegexpMethodPointcut.html</Path>
    <Anchor>matchesExclusion(java.lang.String, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchesName(String)</Name>
      <Type>instm</Type>
      <Scope>BeanDefinitionHolder</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/config/BeanDefinitionHolder.html</Path>
    <Anchor>matchesName(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchesPattern(String)</Name>
      <Type>instm</Type>
      <Scope>AbstractRegexpMethodPointcut</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/AbstractRegexpMethodPointcut.html</Path>
    <Anchor>matchesPattern(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchesProperty(String, String)</Name>
      <Type>clm</Type>
      <Scope>PropertyAccessorUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/PropertyAccessorUtils.html</Path>
    <Anchor>matchesProperty(java.lang.String, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchesTypeName(Class&amp;lt;?&amp;gt;, String)</Name>
      <Type>clm</Type>
      <Scope>ClassUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/ClassUtils.html</Path>
    <Anchor>matchesTypeName(java.lang.Class, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchInParameterValuesWithCallParameters(SqlParameterSource)</Name>
      <Type>instm</Type>
      <Scope>CallMetaDataContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/CallMetaDataContext.html</Path>
    <Anchor>matchInParameterValuesWithCallParameters(org.springframework.jdbc.core.namedparam.SqlParameterSource)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchInParameterValuesWithCallParameters(Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>CallMetaDataContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/CallMetaDataContext.html</Path>
    <Anchor>matchInParameterValuesWithCallParameters(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchInParameterValuesWithCallParameters(Object[])</Name>
      <Type>instm</Type>
      <Scope>CallMetaDataContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/CallMetaDataContext.html</Path>
    <Anchor>matchInParameterValuesWithCallParameters(java.lang.Object[])</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchInParameterValuesWithCallParameters(SqlParameterSource)</Name>
      <Type>instm</Type>
      <Scope>AbstractJdbcCall</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/simple/AbstractJdbcCall.html</Path>
    <Anchor>matchInParameterValuesWithCallParameters(org.springframework.jdbc.core.namedparam.SqlParameterSource)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchInParameterValuesWithCallParameters(Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>AbstractJdbcCall</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/simple/AbstractJdbcCall.html</Path>
    <Anchor>matchInParameterValuesWithCallParameters(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchInParameterValuesWithInsertColumns(SqlParameterSource)</Name>
      <Type>instm</Type>
      <Scope>TableMetaDataContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/TableMetaDataContext.html</Path>
    <Anchor>matchInParameterValuesWithInsertColumns(org.springframework.jdbc.core.namedparam.SqlParameterSource)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchInParameterValuesWithInsertColumns(Map&amp;lt;String, Object&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>TableMetaDataContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/TableMetaDataContext.html</Path>
    <Anchor>matchInParameterValuesWithInsertColumns(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchInParameterValuesWithInsertColumns(SqlParameterSource)</Name>
      <Type>instm</Type>
      <Scope>AbstractJdbcInsert</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/simple/AbstractJdbcInsert.html</Path>
    <Anchor>matchInParameterValuesWithInsertColumns(org.springframework.jdbc.core.namedparam.SqlParameterSource)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchInParameterValuesWithInsertColumns(Map&amp;lt;String, Object&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>AbstractJdbcInsert</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/simple/AbstractJdbcInsert.html</Path>
    <Anchor>matchInParameterValuesWithInsertColumns(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchInterface(String)</Name>
      <Type>instm</Type>
      <Scope>AbstractTypeHierarchyTraversingFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AbstractTypeHierarchyTraversingFilter.html</Path>
    <Anchor>matchInterface(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchInterface(String)</Name>
      <Type>instm</Type>
      <Scope>AssignableTypeFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AssignableTypeFilter.html</Path>
    <Anchor>matchInterface(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchSelf(MetadataReader)</Name>
      <Type>instm</Type>
      <Scope>AbstractTypeHierarchyTraversingFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AbstractTypeHierarchyTraversingFilter.html</Path>
    <Anchor>matchSelf(org.springframework.core.type.classreading.MetadataReader)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchSelf(MetadataReader)</Name>
      <Type>instm</Type>
      <Scope>AnnotationTypeFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AnnotationTypeFilter.html</Path>
    <Anchor>matchSelf(org.springframework.core.type.classreading.MetadataReader)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchStart(String, String)</Name>
      <Type>instm</Type>
      <Scope>AntPathMatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/AntPathMatcher.html</Path>
    <Anchor>matchStart(java.lang.String, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchStart(String, String)</Name>
      <Type>intfm</Type>
      <Scope>PathMatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/PathMatcher.html</Path>
    <Anchor>matchStart(java.lang.String, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchSuperClass(String)</Name>
      <Type>instm</Type>
      <Scope>AbstractTypeHierarchyTraversingFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AbstractTypeHierarchyTraversingFilter.html</Path>
    <Anchor>matchSuperClass(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchSuperClass(String)</Name>
      <Type>instm</Type>
      <Scope>AnnotationTypeFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AnnotationTypeFilter.html</Path>
    <Anchor>matchSuperClass(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchSuperClass(String)</Name>
      <Type>instm</Type>
      <Scope>AssignableTypeFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AssignableTypeFilter.html</Path>
    <Anchor>matchSuperClass(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>matchTargetType(String)</Name>
      <Type>instm</Type>
      <Scope>AssignableTypeFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/filter/AssignableTypeFilter.html</Path>
    <Anchor>matchTargetType(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MATRIX_VARIABLES_ATTRIBUTE</Name>
      <Type>Field</Type>
      <Scope>HandlerMapping</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/HandlerMapping.html</Path>
    <Anchor>MATRIX_VARIABLES_ATTRIBUTE</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MatrixVariable</Name>
      <Type>clm</Type>
      <Scope>org.springframework.web.bind.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/bind/annotation/MatrixVariable.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MatrixVariableMapMethodArgumentResolver</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.servlet.mvc.method.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/method/annotation/MatrixVariableMapMethodArgumentResolver.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MatrixVariableMapMethodArgumentResolver()</Name>
      <Type>Constructor</Type>
      <Scope>MatrixVariableMapMethodArgumentResolver</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/method/annotation/MatrixVariableMapMethodArgumentResolver.html</Path>
    <Anchor>MatrixVariableMapMethodArgumentResolver()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MatrixVariableMethodArgumentResolver</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.servlet.mvc.method.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/method/annotation/MatrixVariableMethodArgumentResolver.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MatrixVariableMethodArgumentResolver()</Name>
      <Type>Constructor</Type>
      <Scope>MatrixVariableMethodArgumentResolver</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/method/annotation/MatrixVariableMethodArgumentResolver.html</Path>
    <Anchor>MatrixVariableMethodArgumentResolver()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>maxAge(String, Matcher&amp;lt;? super Integer&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>CookieResultMatchers</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/result/CookieResultMatchers.html</Path>
    <Anchor>maxAge(java.lang.String, org.hamcrest.Matcher)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>maxAge(String, int)</Name>
      <Type>instm</Type>
      <Scope>CookieResultMatchers</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/result/CookieResultMatchers.html</Path>
    <Anchor>maxAge(java.lang.String, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MAXLENGTH_ATTRIBUTE</Name>
      <Type>Field</Type>
      <Scope>InputTag</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/tags/form/InputTag.html</Path>
    <Anchor>MAXLENGTH_ATTRIBUTE</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MaxUploadSizeExceededException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.web.multipart</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/MaxUploadSizeExceededException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MaxUploadSizeExceededException(long)</Name>
      <Type>Constructor</Type>
      <Scope>MaxUploadSizeExceededException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/MaxUploadSizeExceededException.html</Path>
    <Anchor>MaxUploadSizeExceededException(long)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MaxUploadSizeExceededException(long, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MaxUploadSizeExceededException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/MaxUploadSizeExceededException.html</Path>
    <Anchor>MaxUploadSizeExceededException(long, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBEAN_APPLICATION_KEY</Name>
      <Type>Field</Type>
      <Scope>LiveBeansView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/support/LiveBeansView.html</Path>
    <Anchor>MBEAN_APPLICATION_KEY</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBEAN_DOMAIN_PROPERTY_NAME</Name>
      <Type>Field</Type>
      <Scope>LiveBeansView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/support/LiveBeansView.html</Path>
    <Anchor>MBEAN_DOMAIN_PROPERTY_NAME</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanClientInterceptor</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.access</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/access/MBeanClientInterceptor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanClientInterceptor()</Name>
      <Type>Constructor</Type>
      <Scope>MBeanClientInterceptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/access/MBeanClientInterceptor.html</Path>
    <Anchor>MBeanClientInterceptor()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanConnectFailureException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.jmx.access</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/access/MBeanConnectFailureException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanConnectFailureException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MBeanConnectFailureException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/access/MBeanConnectFailureException.html</Path>
    <Anchor>MBeanConnectFailureException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanExportConfiguration</Name>
      <Type>cl</Type>
      <Scope>org.springframework.context.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/annotation/MBeanExportConfiguration.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanExportConfiguration()</Name>
      <Type>Constructor</Type>
      <Scope>MBeanExportConfiguration</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/annotation/MBeanExportConfiguration.html</Path>
    <Anchor>MBeanExportConfiguration()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mbeanExporter()</Name>
      <Type>instm</Type>
      <Scope>MBeanExportConfiguration</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/annotation/MBeanExportConfiguration.html</Path>
    <Anchor>mbeanExporter()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanExporter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.export</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/MBeanExporter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanExporter()</Name>
      <Type>Constructor</Type>
      <Scope>MBeanExporter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/MBeanExporter.html</Path>
    <Anchor>MBeanExporter()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanExporterListener</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.jmx.export</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/MBeanExporterListener.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanExportException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.jmx.export</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/MBeanExportException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanExportException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MBeanExportException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/MBeanExportException.html</Path>
    <Anchor>MBeanExportException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanExportException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MBeanExportException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/MBeanExportException.html</Path>
    <Anchor>MBeanExportException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanExportOperations</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.jmx.export</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/MBeanExportOperations.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanInfoAssembler</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.jmx.export.assembler</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/assembler/MBeanInfoAssembler.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanInfoRetrievalException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.jmx.access</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/access/MBeanInfoRetrievalException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanInfoRetrievalException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MBeanInfoRetrievalException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/access/MBeanInfoRetrievalException.html</Path>
    <Anchor>MBeanInfoRetrievalException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanInfoRetrievalException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MBeanInfoRetrievalException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/access/MBeanInfoRetrievalException.html</Path>
    <Anchor>MBeanInfoRetrievalException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanProxyFactoryBean</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.access</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/access/MBeanProxyFactoryBean.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanProxyFactoryBean()</Name>
      <Type>Constructor</Type>
      <Scope>MBeanProxyFactoryBean</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/access/MBeanProxyFactoryBean.html</Path>
    <Anchor>MBeanProxyFactoryBean()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mbeanRegistered(ObjectName)</Name>
      <Type>intfm</Type>
      <Scope>MBeanExporterListener</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/MBeanExporterListener.html</Path>
    <Anchor>mbeanRegistered(javax.management.ObjectName)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanRegistrationSupport</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/support/MBeanRegistrationSupport.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanRegistrationSupport()</Name>
      <Type>Constructor</Type>
      <Scope>MBeanRegistrationSupport</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/support/MBeanRegistrationSupport.html</Path>
    <Anchor>MBeanRegistrationSupport()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanServerConnectionFactoryBean</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/support/MBeanServerConnectionFactoryBean.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanServerConnectionFactoryBean()</Name>
      <Type>Constructor</Type>
      <Scope>MBeanServerConnectionFactoryBean</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/support/MBeanServerConnectionFactoryBean.html</Path>
    <Anchor>MBeanServerConnectionFactoryBean()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanServerFactoryBean</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/support/MBeanServerFactoryBean.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanServerFactoryBean()</Name>
      <Type>Constructor</Type>
      <Scope>MBeanServerFactoryBean</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/support/MBeanServerFactoryBean.html</Path>
    <Anchor>MBeanServerFactoryBean()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanServerNotFoundException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.jmx</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/MBeanServerNotFoundException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanServerNotFoundException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MBeanServerNotFoundException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/MBeanServerNotFoundException.html</Path>
    <Anchor>MBeanServerNotFoundException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MBeanServerNotFoundException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MBeanServerNotFoundException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/MBeanServerNotFoundException.html</Path>
    <Anchor>MBeanServerNotFoundException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mbeanUnregistered(ObjectName)</Name>
      <Type>intfm</Type>
      <Scope>MBeanExporterListener</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/MBeanExporterListener.html</Path>
    <Anchor>mbeanUnregistered(javax.management.ObjectName)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md5Digest(byte[])</Name>
      <Type>clm</Type>
      <Scope>DigestUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/DigestUtils.html</Path>
    <Anchor>md5Digest(byte[])</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>md5DigestAsHex(byte[])</Name>
      <Type>clm</Type>
      <Scope>DigestUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/DigestUtils.html</Path>
    <Anchor>md5DigestAsHex(byte[])</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MediaType</Name>
      <Type>cl</Type>
      <Scope>org.springframework.http</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/MediaType.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MediaType(String)</Name>
      <Type>Constructor</Type>
      <Scope>MediaType</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/MediaType.html</Path>
    <Anchor>MediaType(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MediaType(String, String)</Name>
      <Type>Constructor</Type>
      <Scope>MediaType</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/MediaType.html</Path>
    <Anchor>MediaType(java.lang.String, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MediaType(String, String, Charset)</Name>
      <Type>Constructor</Type>
      <Scope>MediaType</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/MediaType.html</Path>
    <Anchor>MediaType(java.lang.String, java.lang.String, java.nio.charset.Charset)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MediaType(String, String, double)</Name>
      <Type>Constructor</Type>
      <Scope>MediaType</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/MediaType.html</Path>
    <Anchor>MediaType(java.lang.String, java.lang.String, double)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MediaType(MediaType, Map&amp;lt;String, String&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>MediaType</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/MediaType.html</Path>
    <Anchor>MediaType(org.springframework.http.MediaType, java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MediaType(String, String, Map&amp;lt;String, String&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>MediaType</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/MediaType.html</Path>
    <Anchor>MediaType(java.lang.String, java.lang.String, java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mediaType(String, MediaType)</Name>
      <Type>instm</Type>
      <Scope>ContentNegotiationConfigurer</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/config/annotation/ContentNegotiationConfigurer.html</Path>
    <Anchor>mediaType(java.lang.String, org.springframework.http.MediaType)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MediaTypeEditor</Name>
      <Type>cl</Type>
      <Scope>org.springframework.http</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/MediaTypeEditor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MediaTypeEditor()</Name>
      <Type>Constructor</Type>
      <Scope>MediaTypeEditor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/MediaTypeEditor.html</Path>
    <Anchor>MediaTypeEditor()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MediaTypeExpression</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.web.servlet.mvc.condition</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/condition/MediaTypeExpression.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MediaTypeFileExtensionResolver</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.web.accept</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/accept/MediaTypeFileExtensionResolver.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mediaTypes(Map&amp;lt;String, MediaType&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>ContentNegotiationConfigurer</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/config/annotation/ContentNegotiationConfigurer.html</Path>
    <Anchor>mediaTypes(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>member</Name>
      <Type>Field</Type>
      <Scope>InjectionMetadata.InjectedElement</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/annotation/InjectionMetadata.InjectedElement.html</Path>
    <Anchor>member</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(Object)</Name>
      <Type>instm</Type>
      <Scope>ManagedList</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedList.html</Path>
    <Anchor>merge(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(Object)</Name>
      <Type>instm</Type>
      <Scope>ManagedMap</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedMap.html</Path>
    <Anchor>merge(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(Object)</Name>
      <Type>instm</Type>
      <Scope>ManagedProperties</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedProperties.html</Path>
    <Anchor>merge(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(Object)</Name>
      <Type>instm</Type>
      <Scope>ManagedSet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/ManagedSet.html</Path>
    <Anchor>merge(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(Object)</Name>
      <Type>intfm</Type>
      <Scope>Mergeable</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/Mergeable.html</Path>
    <Anchor>merge(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(ConfigurableEnvironment)</Name>
      <Type>instm</Type>
      <Scope>AbstractEnvironment</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/env/AbstractEnvironment.html</Path>
    <Anchor>merge(org.springframework.core.env.ConfigurableEnvironment)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(ConfigurableEnvironment)</Name>
      <Type>intfm</Type>
      <Scope>ConfigurableEnvironment</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/env/ConfigurableEnvironment.html</Path>
    <Anchor>merge(org.springframework.core.env.ConfigurableEnvironment)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(T)</Name>
      <Type>intfm</Type>
      <Scope>HibernateOperations</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/orm/hibernate3/HibernateOperations.html</Path>
    <Anchor>merge(T)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(String, T)</Name>
      <Type>intfm</Type>
      <Scope>HibernateOperations</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/orm/hibernate3/HibernateOperations.html</Path>
    <Anchor>merge(java.lang.String, T)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(T)</Name>
      <Type>instm</Type>
      <Scope>HibernateTemplate</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/orm/hibernate3/HibernateTemplate.html</Path>
    <Anchor>merge(T)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(String, T)</Name>
      <Type>instm</Type>
      <Scope>HibernateTemplate</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/orm/hibernate3/HibernateTemplate.html</Path>
    <Anchor>merge(java.lang.String, T)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(T)</Name>
      <Type>intfm</Type>
      <Scope>JpaOperations</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/orm/jpa/JpaOperations.html</Path>
    <Anchor>merge(T)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(T)</Name>
      <Type>instm</Type>
      <Scope>JpaTemplate</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/orm/jpa/JpaTemplate.html</Path>
    <Anchor>merge(T)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(Object)</Name>
      <Type>instm</Type>
      <Scope>MockHttpServletRequestBuilder</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.html</Path>
    <Anchor>merge(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>merge(Object)</Name>
      <Type>instm</Type>
      <Scope>MockMultipartHttpServletRequestBuilder</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/request/MockMultipartHttpServletRequestBuilder.html</Path>
    <Anchor>merge(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MERGE_ATTRIBUTE</Name>
      <Type>Field</Type>
      <Scope>BeanDefinitionParserDelegate</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.html</Path>
    <Anchor>MERGE_ATTRIBUTE</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Mergeable</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.beans</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/Mergeable.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeArrayIntoCollection(Object, Collection)</Name>
      <Type>clm</Type>
      <Scope>CollectionUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/CollectionUtils.html</Path>
    <Anchor>mergeArrayIntoCollection(java.lang.Object, java.util.Collection)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeAttributes(Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>ExtendedModelMap</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/ui/ExtendedModelMap.html</Path>
    <Anchor>mergeAttributes(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeAttributes(Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>intfm</Type>
      <Scope>Model</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/ui/Model.html</Path>
    <Anchor>mergeAttributes(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeAttributes(Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>ModelMap</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/ui/ModelMap.html</Path>
    <Anchor>mergeAttributes(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeAttributes(Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>ModelAndViewContainer</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/method/support/ModelAndViewContainer.html</Path>
    <Anchor>mergeAttributes(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeAttributes(Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>intfm</Type>
      <Scope>RedirectAttributes</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/support/RedirectAttributes.html</Path>
    <Anchor>mergeAttributes(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeAttributes(Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>RedirectAttributesModelMap</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/support/RedirectAttributesModelMap.html</Path>
    <Anchor>mergeAttributes(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MergedBeanDefinitionPostProcessor</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.beans.factory.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/MergedBeanDefinitionPostProcessor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MergedContextConfiguration</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.context</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/context/MergedContextConfiguration.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MergedContextConfiguration(Class&amp;lt;?&amp;gt;, String[], Class&amp;lt;?&amp;gt;[], String[], ContextLoader)</Name>
      <Type>Constructor</Type>
      <Scope>MergedContextConfiguration</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/context/MergedContextConfiguration.html</Path>
    <Anchor>MergedContextConfiguration(java.lang.Class, java.lang.String[], java.lang.Class[], java.lang.String[], org.springframework.test.context.ContextLoader)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MergedContextConfiguration(Class&amp;lt;?&amp;gt;, String[], Class&amp;lt;?&amp;gt;[], Set&amp;lt;Class&amp;lt;? extends ApplicationContextInitializer&amp;lt;? extends ConfigurableApplicationContext&amp;gt;&amp;gt;&amp;gt;, String[], ContextLoader)</Name>
      <Type>Constructor</Type>
      <Scope>MergedContextConfiguration</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/context/MergedContextConfiguration.html</Path>
    <Anchor>MergedContextConfiguration(java.lang.Class, java.lang.String[], java.lang.Class[], java.util.Set, java.lang.String[], org.springframework.test.context.ContextLoader)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergePdfDocument(Map&amp;lt;String, Object&amp;gt;, PdfStamper, HttpServletRequest, HttpServletResponse)</Name>
      <Type>instm</Type>
      <Scope>AbstractPdfStamperView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/view/document/AbstractPdfStamperView.html</Path>
    <Anchor>mergePdfDocument(java.util.Map, com.lowagie.text.pdf.PdfStamper, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeProperties()</Name>
      <Type>instm</Type>
      <Scope>PropertiesLoaderSupport</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/io/support/PropertiesLoaderSupport.html</Path>
    <Anchor>mergeProperties()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergePropertiesIntoMap(Properties, Map)</Name>
      <Type>clm</Type>
      <Scope>CollectionUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/CollectionUtils.html</Path>
    <Anchor>mergePropertiesIntoMap(java.util.Properties, java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeStringArrays(String[], String[])</Name>
      <Type>clm</Type>
      <Scope>StringUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/StringUtils.html</Path>
    <Anchor>mergeStringArrays(java.lang.String[], java.lang.String[])</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeTemplate(VelocityEngine, String, Map&amp;lt;String, Object&amp;gt;, Writer)</Name>
      <Type>clm</Type>
      <Scope>VelocityEngineUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/ui/velocity/VelocityEngineUtils.html</Path>
    <Anchor>mergeTemplate(org.apache.velocity.app.VelocityEngine, java.lang.String, java.util.Map, java.io.Writer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeTemplate(VelocityEngine, String, String, Map&amp;lt;String, Object&amp;gt;, Writer)</Name>
      <Type>clm</Type>
      <Scope>VelocityEngineUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/ui/velocity/VelocityEngineUtils.html</Path>
    <Anchor>mergeTemplate(org.apache.velocity.app.VelocityEngine, java.lang.String, java.lang.String, java.util.Map, java.io.Writer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeTemplate(Template, Context, HttpServletResponse)</Name>
      <Type>instm</Type>
      <Scope>VelocityView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/view/velocity/VelocityView.html</Path>
    <Anchor>mergeTemplate(org.apache.velocity.Template, org.apache.velocity.context.Context, javax.servlet.http.HttpServletResponse)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeTemplateIntoString(VelocityEngine, String, Map&amp;lt;String, Object&amp;gt;)</Name>
      <Type>clm</Type>
      <Scope>VelocityEngineUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/ui/velocity/VelocityEngineUtils.html</Path>
    <Anchor>mergeTemplateIntoString(org.apache.velocity.app.VelocityEngine, java.lang.String, java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mergeTemplateIntoString(VelocityEngine, String, String, Map&amp;lt;String, Object&amp;gt;)</Name>
      <Type>clm</Type>
      <Scope>VelocityEngineUtils</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/ui/velocity/VelocityEngineUtils.html</Path>
    <Anchor>mergeTemplateIntoString(org.apache.velocity.app.VelocityEngine, java.lang.String, java.lang.String, java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MESSAGE_SOURCE_BEAN_NAME</Name>
      <Type>Field</Type>
      <Scope>AbstractApplicationContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/support/AbstractApplicationContext.html</Path>
    <Anchor>MESSAGE_SOURCE_BEAN_NAME</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageCodeFormatter</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.validation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/MessageCodeFormatter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageCodesResolver</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.validation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/MessageCodesResolver.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageConversionException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.jms.support.converter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MessageConversionException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageConversionException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MessageConversionException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MessageConversionException.html</Path>
    <Anchor>MessageConversionException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageConversionException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MessageConversionException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MessageConversionException.html</Path>
    <Anchor>MessageConversionException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageConverter</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.jms.support.converter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MessageConverter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>messageConverters</Name>
      <Type>Field</Type>
      <Scope>AbstractMessageConverterMethodArgumentResolver</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodArgumentResolver.html</Path>
    <Anchor>messageConverters</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageCreator</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.jms.core</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/core/MessageCreator.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageEOFException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.jms</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/MessageEOFException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageEOFException(MessageEOFException)</Name>
      <Type>Constructor</Type>
      <Scope>MessageEOFException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/MessageEOFException.html</Path>
    <Anchor>MessageEOFException(javax.jms.MessageEOFException)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageFormatException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.jms</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/MessageFormatException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageFormatException(MessageFormatException)</Name>
      <Type>Constructor</Type>
      <Scope>MessageFormatException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/MessageFormatException.html</Path>
    <Anchor>MessageFormatException(javax.jms.MessageFormatException)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageListenerAdapter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jms.listener.adapter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/listener/adapter/MessageListenerAdapter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageListenerAdapter()</Name>
      <Type>Constructor</Type>
      <Scope>MessageListenerAdapter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/listener/adapter/MessageListenerAdapter.html</Path>
    <Anchor>MessageListenerAdapter()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageListenerAdapter(Object)</Name>
      <Type>Constructor</Type>
      <Scope>MessageListenerAdapter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/listener/adapter/MessageListenerAdapter.html</Path>
    <Anchor>MessageListenerAdapter(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageListenerAdapter102</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jms.listener.adapter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/listener/adapter/MessageListenerAdapter102.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageListenerAdapter102()</Name>
      <Type>Constructor</Type>
      <Scope>MessageListenerAdapter102</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/listener/adapter/MessageListenerAdapter102.html</Path>
    <Anchor>MessageListenerAdapter102()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageListenerAdapter102(Object)</Name>
      <Type>Constructor</Type>
      <Scope>MessageListenerAdapter102</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/listener/adapter/MessageListenerAdapter102.html</Path>
    <Anchor>MessageListenerAdapter102(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageNotReadableException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.jms</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/MessageNotReadableException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageNotReadableException(MessageNotReadableException)</Name>
      <Type>Constructor</Type>
      <Scope>MessageNotReadableException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/MessageNotReadableException.html</Path>
    <Anchor>MessageNotReadableException(javax.jms.MessageNotReadableException)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageNotWriteableException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.jms</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/MessageNotWriteableException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageNotWriteableException(MessageNotWriteableException)</Name>
      <Type>Constructor</Type>
      <Scope>MessageNotWriteableException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/MessageNotWriteableException.html</Path>
    <Anchor>MessageNotWriteableException(javax.jms.MessageNotWriteableException)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessagePostProcessor</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.jms.core</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/core/MessagePostProcessor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>messageReceived(Object, Session)</Name>
      <Type>instm</Type>
      <Scope>AbstractPollingMessageListenerContainer</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.html</Path>
    <Anchor>messageReceived(java.lang.Object, javax.jms.Session)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>messageReceived(Object, Session)</Name>
      <Type>instm</Type>
      <Scope>DefaultMessageListenerContainer</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/listener/DefaultMessageListenerContainer.html</Path>
    <Anchor>messageReceived(java.lang.Object, javax.jms.Session)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MESSAGES_ATTRIBUTE</Name>
      <Type>Field</Type>
      <Scope>ErrorsTag</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/tags/form/ErrorsTag.html</Path>
    <Anchor>MESSAGES_ATTRIBUTE</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSource</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.context</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/MessageSource.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSourceAccessor</Name>
      <Type>cl</Type>
      <Scope>org.springframework.context.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/support/MessageSourceAccessor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSourceAccessor(MessageSource)</Name>
      <Type>Constructor</Type>
      <Scope>MessageSourceAccessor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/support/MessageSourceAccessor.html</Path>
    <Anchor>MessageSourceAccessor(org.springframework.context.MessageSource)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSourceAccessor(MessageSource, Locale)</Name>
      <Type>Constructor</Type>
      <Scope>MessageSourceAccessor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/support/MessageSourceAccessor.html</Path>
    <Anchor>MessageSourceAccessor(org.springframework.context.MessageSource, java.util.Locale)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSourceAware</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.context</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/MessageSourceAware.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSourceResolvable</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.context</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/MessageSourceResolvable.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSourceResourceBundle</Name>
      <Type>cl</Type>
      <Scope>org.springframework.context.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/support/MessageSourceResourceBundle.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSourceResourceBundle(MessageSource, Locale)</Name>
      <Type>Constructor</Type>
      <Scope>MessageSourceResourceBundle</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/support/MessageSourceResourceBundle.html</Path>
    <Anchor>MessageSourceResourceBundle(org.springframework.context.MessageSource, java.util.Locale)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSourceResourceBundle(MessageSource, Locale, ResourceBundle)</Name>
      <Type>Constructor</Type>
      <Scope>MessageSourceResourceBundle</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/support/MessageSourceResourceBundle.html</Path>
    <Anchor>MessageSourceResourceBundle(org.springframework.context.MessageSource, java.util.Locale, java.util.ResourceBundle)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSourceResourceBundleLocator</Name>
      <Type>cl</Type>
      <Scope>org.springframework.validation.beanvalidation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/beanvalidation/MessageSourceResourceBundleLocator.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSourceResourceBundleLocator(MessageSource)</Name>
      <Type>Constructor</Type>
      <Scope>MessageSourceResourceBundleLocator</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/beanvalidation/MessageSourceResourceBundleLocator.html</Path>
    <Anchor>MessageSourceResourceBundleLocator(org.springframework.context.MessageSource)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSourceSupport</Name>
      <Type>cl</Type>
      <Scope>org.springframework.context.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/support/MessageSourceSupport.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageSourceSupport()</Name>
      <Type>Constructor</Type>
      <Scope>MessageSourceSupport</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/support/MessageSourceSupport.html</Path>
    <Anchor>MessageSourceSupport()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageTag</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.servlet.tags</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/tags/MessageTag.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageTag()</Name>
      <Type>Constructor</Type>
      <Scope>MessageTag</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/tags/MessageTag.html</Path>
    <Anchor>MessageTag()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageType</Name>
      <Type>Enum</Type>
      <Scope>org.springframework.jms.support.converter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jms/support/converter/MessageType.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>META_ELEMENT</Name>
      <Type>Field</Type>
      <Scope>BeanDefinitionParserDelegate</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.html</Path>
    <Anchor>META_ELEMENT</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetaDataAccessException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.jdbc.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/support/MetaDataAccessException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetaDataAccessException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MetaDataAccessException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/support/MetaDataAccessException.html</Path>
    <Anchor>MetaDataAccessException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetaDataAccessException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MetaDataAccessException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/support/MetaDataAccessException.html</Path>
    <Anchor>MetaDataAccessException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetadataAwareAspectInstanceFactory</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.aop.aspectj.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/aspectj/annotation/MetadataAwareAspectInstanceFactory.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataCatalogNameToUse(String)</Name>
      <Type>intfm</Type>
      <Scope>CallMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/CallMetaDataProvider.html</Path>
    <Anchor>metaDataCatalogNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataCatalogNameToUse(String)</Name>
      <Type>instm</Type>
      <Scope>GenericCallMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.html</Path>
    <Anchor>metaDataCatalogNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataCatalogNameToUse(String)</Name>
      <Type>instm</Type>
      <Scope>GenericTableMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.html</Path>
    <Anchor>metaDataCatalogNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataCatalogNameToUse(String)</Name>
      <Type>instm</Type>
      <Scope>OracleCallMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/OracleCallMetaDataProvider.html</Path>
    <Anchor>metaDataCatalogNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataCatalogNameToUse(String)</Name>
      <Type>intfm</Type>
      <Scope>TableMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/TableMetaDataProvider.html</Path>
    <Anchor>metaDataCatalogNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetadataMBeanInfoAssembler</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.export.assembler</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/assembler/MetadataMBeanInfoAssembler.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetadataMBeanInfoAssembler()</Name>
      <Type>Constructor</Type>
      <Scope>MetadataMBeanInfoAssembler</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/assembler/MetadataMBeanInfoAssembler.html</Path>
    <Anchor>MetadataMBeanInfoAssembler()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetadataMBeanInfoAssembler(JmxAttributeSource)</Name>
      <Type>Constructor</Type>
      <Scope>MetadataMBeanInfoAssembler</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/assembler/MetadataMBeanInfoAssembler.html</Path>
    <Anchor>MetadataMBeanInfoAssembler(org.springframework.jmx.export.metadata.JmxAttributeSource)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetadataNamingStrategy</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.export.naming</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/naming/MetadataNamingStrategy.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetadataNamingStrategy()</Name>
      <Type>Constructor</Type>
      <Scope>MetadataNamingStrategy</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/naming/MetadataNamingStrategy.html</Path>
    <Anchor>MetadataNamingStrategy()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetadataNamingStrategy(JmxAttributeSource)</Name>
      <Type>Constructor</Type>
      <Scope>MetadataNamingStrategy</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/naming/MetadataNamingStrategy.html</Path>
    <Anchor>MetadataNamingStrategy(org.springframework.jmx.export.metadata.JmxAttributeSource)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetadataReader</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.core.type.classreading</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/classreading/MetadataReader.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetadataReaderFactory</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.core.type.classreading</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/classreading/MetadataReaderFactory.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataSchemaNameToUse(String)</Name>
      <Type>intfm</Type>
      <Scope>CallMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/CallMetaDataProvider.html</Path>
    <Anchor>metaDataSchemaNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataSchemaNameToUse(String)</Name>
      <Type>instm</Type>
      <Scope>Db2CallMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/Db2CallMetaDataProvider.html</Path>
    <Anchor>metaDataSchemaNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataSchemaNameToUse(String)</Name>
      <Type>instm</Type>
      <Scope>DerbyCallMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/DerbyCallMetaDataProvider.html</Path>
    <Anchor>metaDataSchemaNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataSchemaNameToUse(String)</Name>
      <Type>instm</Type>
      <Scope>GenericCallMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.html</Path>
    <Anchor>metaDataSchemaNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataSchemaNameToUse(String)</Name>
      <Type>instm</Type>
      <Scope>GenericTableMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/GenericTableMetaDataProvider.html</Path>
    <Anchor>metaDataSchemaNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataSchemaNameToUse(String)</Name>
      <Type>instm</Type>
      <Scope>OracleCallMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/OracleCallMetaDataProvider.html</Path>
    <Anchor>metaDataSchemaNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataSchemaNameToUse(String)</Name>
      <Type>instm</Type>
      <Scope>PostgresCallMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/PostgresCallMetaDataProvider.html</Path>
    <Anchor>metaDataSchemaNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>metaDataSchemaNameToUse(String)</Name>
      <Type>intfm</Type>
      <Scope>TableMetaDataProvider</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/core/metadata/TableMetaDataProvider.html</Path>
    <Anchor>metaDataSchemaNameToUse(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>method</Name>
      <Type>Field</Type>
      <Scope>ReflectiveMethodInvocation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/framework/ReflectiveMethodInvocation.html</Path>
    <Anchor>method</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>method(HttpMethod)</Name>
      <Type>clm</Type>
      <Scope>MockRestRequestMatchers</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/client/match/MockRestRequestMatchers.html</Path>
    <Anchor>method(org.springframework.http.HttpMethod)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>method(Method)</Name>
      <Type>instm</Type>
      <Scope>HandlerResultMatchers</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/result/HandlerResultMatchers.html</Path>
    <Anchor>method(java.lang.reflect.Method)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>METHOD_GET</Name>
      <Type>Field</Type>
      <Scope>WebContentGenerator</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/support/WebContentGenerator.html</Path>
    <Anchor>METHOD_GET</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>METHOD_HEAD</Name>
      <Type>Field</Type>
      <Scope>WebContentGenerator</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/support/WebContentGenerator.html</Path>
    <Anchor>METHOD_HEAD</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>METHOD_POST</Name>
      <Type>Field</Type>
      <Scope>WebContentGenerator</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/support/WebContentGenerator.html</Path>
    <Anchor>METHOD_POST</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodArgumentNotValidException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.web.bind</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/bind/MethodArgumentNotValidException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodArgumentNotValidException(MethodParameter, BindingResult)</Name>
      <Type>Constructor</Type>
      <Scope>MethodArgumentNotValidException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/bind/MethodArgumentNotValidException.html</Path>
    <Anchor>MethodArgumentNotValidException(org.springframework.core.MethodParameter, org.springframework.validation.BindingResult)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodBeforeAdvice</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.aop</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/MethodBeforeAdvice.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodBeforeAdviceInterceptor</Name>
      <Type>cl</Type>
      <Scope>org.springframework.aop.framework.adapter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/framework/adapter/MethodBeforeAdviceInterceptor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodBeforeAdviceInterceptor(MethodBeforeAdvice)</Name>
      <Type>Constructor</Type>
      <Scope>MethodBeforeAdviceInterceptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/framework/adapter/MethodBeforeAdviceInterceptor.html</Path>
    <Anchor>MethodBeforeAdviceInterceptor(org.springframework.aop.MethodBeforeAdvice)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>methodBlock(FrameworkMethod)</Name>
      <Type>instm</Type>
      <Scope>SpringJUnit4ClassRunner</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/context/junit4/SpringJUnit4ClassRunner.html</Path>
    <Anchor>methodBlock(org.junit.runners.model.FrameworkMethod)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodExclusionMBeanInfoAssembler</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.export.assembler</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/assembler/MethodExclusionMBeanInfoAssembler.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodExclusionMBeanInfoAssembler()</Name>
      <Type>Constructor</Type>
      <Scope>MethodExclusionMBeanInfoAssembler</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/assembler/MethodExclusionMBeanInfoAssembler.html</Path>
    <Anchor>MethodExclusionMBeanInfoAssembler()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodExecutor</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.expression</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/expression/MethodExecutor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodFilter</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.expression</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/expression/MethodFilter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>methodIdentification(Method, Class&amp;lt;?&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>CacheAspectSupport</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/cache/interceptor/CacheAspectSupport.html</Path>
    <Anchor>methodIdentification(java.lang.reflect.Method, java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>methodIdentification(Method, Class)</Name>
      <Type>instm</Type>
      <Scope>TransactionAspectSupport</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/transaction/interceptor/TransactionAspectSupport.html</Path>
    <Anchor>methodIdentification(java.lang.reflect.Method, java.lang.Class)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>methodIdentification(Method)</Name>
      <Type>instm</Type>
      <Scope>TransactionAspectSupport</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/transaction/interceptor/TransactionAspectSupport.html</Path>
    <Anchor>methodIdentification(java.lang.reflect.Method)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvocationException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.beans</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/MethodInvocationException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvocationException(PropertyChangeEvent, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MethodInvocationException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/MethodInvocationException.html</Path>
    <Anchor>MethodInvocationException(java.beans.PropertyChangeEvent, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvocationProceedingJoinPoint</Name>
      <Type>cl</Type>
      <Scope>org.springframework.aop.aspectj</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvocationProceedingJoinPoint(ProxyMethodInvocation)</Name>
      <Type>Constructor</Type>
      <Scope>MethodInvocationProceedingJoinPoint</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint.html</Path>
    <Anchor>MethodInvocationProceedingJoinPoint(org.springframework.aop.ProxyMethodInvocation)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvoker</Name>
      <Type>cl</Type>
      <Scope>org.springframework.util</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/MethodInvoker.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvoker()</Name>
      <Type>Constructor</Type>
      <Scope>MethodInvoker</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/MethodInvoker.html</Path>
    <Anchor>MethodInvoker()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvokingFactoryBean</Name>
      <Type>cl</Type>
      <Scope>org.springframework.beans.factory.config</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/config/MethodInvokingFactoryBean.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvokingFactoryBean()</Name>
      <Type>Constructor</Type>
      <Scope>MethodInvokingFactoryBean</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/config/MethodInvokingFactoryBean.html</Path>
    <Anchor>MethodInvokingFactoryBean()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvokingJobDetailFactoryBean</Name>
      <Type>cl</Type>
      <Scope>org.springframework.scheduling.quartz</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvokingJobDetailFactoryBean()</Name>
      <Type>Constructor</Type>
      <Scope>MethodInvokingJobDetailFactoryBean</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.html</Path>
    <Anchor>MethodInvokingJobDetailFactoryBean()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvokingJobDetailFactoryBean.MethodInvokingJob</Name>
      <Type>cl</Type>
      <Scope>org.springframework.scheduling.quartz</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.MethodInvokingJob.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvokingJobDetailFactoryBean.MethodInvokingJob()</Name>
      <Type>Constructor</Type>
      <Scope>MethodInvokingJobDetailFactoryBean.MethodInvokingJob</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.MethodInvokingJob.html</Path>
    <Anchor>MethodInvokingJobDetailFactoryBean.MethodInvokingJob()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvokingJobDetailFactoryBean.StatefulMethodInvokingJob</Name>
      <Type>cl</Type>
      <Scope>org.springframework.scheduling.quartz</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.StatefulMethodInvokingJob.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvokingJobDetailFactoryBean.StatefulMethodInvokingJob()</Name>
      <Type>Constructor</Type>
      <Scope>MethodInvokingJobDetailFactoryBean.StatefulMethodInvokingJob</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/scheduling/quartz/MethodInvokingJobDetailFactoryBean.StatefulMethodInvokingJob.html</Path>
    <Anchor>MethodInvokingJobDetailFactoryBean.StatefulMethodInvokingJob()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvokingRunnable</Name>
      <Type>cl</Type>
      <Scope>org.springframework.scheduling.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/scheduling/support/MethodInvokingRunnable.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvokingRunnable()</Name>
      <Type>Constructor</Type>
      <Scope>MethodInvokingRunnable</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/scheduling/support/MethodInvokingRunnable.html</Path>
    <Anchor>MethodInvokingRunnable()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvokingTimerTaskFactoryBean</Name>
      <Type>cl</Type>
      <Scope>org.springframework.scheduling.timer</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/scheduling/timer/MethodInvokingTimerTaskFactoryBean.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodInvokingTimerTaskFactoryBean()</Name>
      <Type>Constructor</Type>
      <Scope>MethodInvokingTimerTaskFactoryBean</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/scheduling/timer/MethodInvokingTimerTaskFactoryBean.html</Path>
    <Anchor>MethodInvokingTimerTaskFactoryBean()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodLocatingFactoryBean</Name>
      <Type>cl</Type>
      <Scope>org.springframework.aop.config</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/config/MethodLocatingFactoryBean.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodLocatingFactoryBean()</Name>
      <Type>Constructor</Type>
      <Scope>MethodLocatingFactoryBean</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/config/MethodLocatingFactoryBean.html</Path>
    <Anchor>MethodLocatingFactoryBean()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodMapTransactionAttributeSource</Name>
      <Type>cl</Type>
      <Scope>org.springframework.transaction.interceptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodMapTransactionAttributeSource()</Name>
      <Type>Constructor</Type>
      <Scope>MethodMapTransactionAttributeSource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/transaction/interceptor/MethodMapTransactionAttributeSource.html</Path>
    <Anchor>MethodMapTransactionAttributeSource()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodMatcher</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.aop</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/MethodMatcher.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodMatchers</Name>
      <Type>cl</Type>
      <Scope>org.springframework.aop.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/MethodMatchers.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodMatchers()</Name>
      <Type>Constructor</Type>
      <Scope>MethodMatchers</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/aop/support/MethodMatchers.html</Path>
    <Anchor>MethodMatchers()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodMetadata</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.core.type</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/type/MethodMetadata.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>methodName(Matcher&amp;lt;? super String&amp;gt;)</Name>
      <Type>instm</Type>
      <Scope>HandlerResultMatchers</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/result/HandlerResultMatchers.html</Path>
    <Anchor>methodName(org.hamcrest.Matcher)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>methodName(String)</Name>
      <Type>instm</Type>
      <Scope>HandlerResultMatchers</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/result/HandlerResultMatchers.html</Path>
    <Anchor>methodName(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodNameBasedMBeanInfoAssembler</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.export.assembler</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssembler.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodNameBasedMBeanInfoAssembler()</Name>
      <Type>Constructor</Type>
      <Scope>MethodNameBasedMBeanInfoAssembler</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/assembler/MethodNameBasedMBeanInfoAssembler.html</Path>
    <Anchor>MethodNameBasedMBeanInfoAssembler()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodNameResolver</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.web.servlet.mvc.multiaction</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/multiaction/MethodNameResolver.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodOverride</Name>
      <Type>cl</Type>
      <Scope>org.springframework.beans.factory.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/MethodOverride.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodOverride(String)</Name>
      <Type>Constructor</Type>
      <Scope>MethodOverride</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/MethodOverride.html</Path>
    <Anchor>MethodOverride(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodOverrides</Name>
      <Type>cl</Type>
      <Scope>org.springframework.beans.factory.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/MethodOverrides.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodOverrides()</Name>
      <Type>Constructor</Type>
      <Scope>MethodOverrides</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/MethodOverrides.html</Path>
    <Anchor>MethodOverrides()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodOverrides(MethodOverrides)</Name>
      <Type>Constructor</Type>
      <Scope>MethodOverrides</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/MethodOverrides.html</Path>
    <Anchor>MethodOverrides(org.springframework.beans.factory.support.MethodOverrides)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodParameter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.core</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/MethodParameter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodParameter(Method, int)</Name>
      <Type>Constructor</Type>
      <Scope>MethodParameter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/MethodParameter.html</Path>
    <Anchor>MethodParameter(java.lang.reflect.Method, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodParameter(Method, int, int)</Name>
      <Type>Constructor</Type>
      <Scope>MethodParameter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/MethodParameter.html</Path>
    <Anchor>MethodParameter(java.lang.reflect.Method, int, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodParameter(Constructor, int)</Name>
      <Type>Constructor</Type>
      <Scope>MethodParameter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/MethodParameter.html</Path>
    <Anchor>MethodParameter(java.lang.reflect.Constructor, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodParameter(Constructor, int, int)</Name>
      <Type>Constructor</Type>
      <Scope>MethodParameter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/MethodParameter.html</Path>
    <Anchor>MethodParameter(java.lang.reflect.Constructor, int, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodParameter(MethodParameter)</Name>
      <Type>Constructor</Type>
      <Scope>MethodParameter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/MethodParameter.html</Path>
    <Anchor>MethodParameter(org.springframework.core.MethodParameter)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodReference</Name>
      <Type>cl</Type>
      <Scope>org.springframework.expression.spel.ast</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/expression/spel/ast/MethodReference.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodReference(boolean, String, int, SpelNodeImpl...)</Name>
      <Type>Constructor</Type>
      <Scope>MethodReference</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/expression/spel/ast/MethodReference.html</Path>
    <Anchor>MethodReference(boolean, java.lang.String, int, org.springframework.expression.spel.ast.SpelNodeImpl...)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodReplacer</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.beans.factory.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/support/MethodReplacer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodResolver</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.expression</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/expression/MethodResolver.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodValidationInterceptor</Name>
      <Type>cl</Type>
      <Scope>org.springframework.validation.beanvalidation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/beanvalidation/MethodValidationInterceptor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodValidationInterceptor()</Name>
      <Type>Constructor</Type>
      <Scope>MethodValidationInterceptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/beanvalidation/MethodValidationInterceptor.html</Path>
    <Anchor>MethodValidationInterceptor()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodValidationInterceptor(ValidatorFactory)</Name>
      <Type>Constructor</Type>
      <Scope>MethodValidationInterceptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/beanvalidation/MethodValidationInterceptor.html</Path>
    <Anchor>MethodValidationInterceptor(javax.validation.ValidatorFactory)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodValidationInterceptor(Validator)</Name>
      <Type>Constructor</Type>
      <Scope>MethodValidationInterceptor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/beanvalidation/MethodValidationInterceptor.html</Path>
    <Anchor>MethodValidationInterceptor(javax.validation.Validator)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodValidationPostProcessor</Name>
      <Type>cl</Type>
      <Scope>org.springframework.validation.beanvalidation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MethodValidationPostProcessor()</Name>
      <Type>Constructor</Type>
      <Scope>MethodValidationPostProcessor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.html</Path>
    <Anchor>MethodValidationPostProcessor()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetricType</Name>
      <Type>Enum</Type>
      <Scope>org.springframework.jmx.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/support/MetricType.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MillisecondInstantPrinter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.format.datetime.joda</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/format/datetime/joda/MillisecondInstantPrinter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MillisecondInstantPrinter(DateTimeFormatter)</Name>
      <Type>Constructor</Type>
      <Scope>MillisecondInstantPrinter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/format/datetime/joda/MillisecondInstantPrinter.html</Path>
    <Anchor>MillisecondInstantPrinter(org.joda.time.format.DateTimeFormatter)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeContainer</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.oxm.mime</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/mime/MimeContainer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeMailMessage</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mail.javamail</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMailMessage.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeMailMessage(MimeMessageHelper)</Name>
      <Type>Constructor</Type>
      <Scope>MimeMailMessage</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMailMessage.html</Path>
    <Anchor>MimeMailMessage(org.springframework.mail.javamail.MimeMessageHelper)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeMailMessage(MimeMessage)</Name>
      <Type>Constructor</Type>
      <Scope>MimeMailMessage</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMailMessage.html</Path>
    <Anchor>MimeMailMessage(javax.mail.internet.MimeMessage)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeMarshaller</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.oxm.mime</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/mime/MimeMarshaller.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeMessageHelper</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mail.javamail</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMessageHelper.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeMessageHelper(MimeMessage)</Name>
      <Type>Constructor</Type>
      <Scope>MimeMessageHelper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMessageHelper.html</Path>
    <Anchor>MimeMessageHelper(javax.mail.internet.MimeMessage)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeMessageHelper(MimeMessage, String)</Name>
      <Type>Constructor</Type>
      <Scope>MimeMessageHelper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMessageHelper.html</Path>
    <Anchor>MimeMessageHelper(javax.mail.internet.MimeMessage, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeMessageHelper(MimeMessage, boolean)</Name>
      <Type>Constructor</Type>
      <Scope>MimeMessageHelper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMessageHelper.html</Path>
    <Anchor>MimeMessageHelper(javax.mail.internet.MimeMessage, boolean)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeMessageHelper(MimeMessage, boolean, String)</Name>
      <Type>Constructor</Type>
      <Scope>MimeMessageHelper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMessageHelper.html</Path>
    <Anchor>MimeMessageHelper(javax.mail.internet.MimeMessage, boolean, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeMessageHelper(MimeMessage, int)</Name>
      <Type>Constructor</Type>
      <Scope>MimeMessageHelper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMessageHelper.html</Path>
    <Anchor>MimeMessageHelper(javax.mail.internet.MimeMessage, int)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeMessageHelper(MimeMessage, int, String)</Name>
      <Type>Constructor</Type>
      <Scope>MimeMessageHelper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMessageHelper.html</Path>
    <Anchor>MimeMessageHelper(javax.mail.internet.MimeMessage, int, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeMessagePreparator</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.mail.javamail</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMessagePreparator.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MimeUnmarshaller</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.oxm.mime</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/oxm/mime/MimeUnmarshaller.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MISSING_FIELD_ERROR_CODE</Name>
      <Type>Field</Type>
      <Scope>DefaultBindingErrorProcessor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/DefaultBindingErrorProcessor.html</Path>
    <Anchor>MISSING_FIELD_ERROR_CODE</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MissingPortletRequestParameterException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.web.portlet.bind</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/bind/MissingPortletRequestParameterException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MissingPortletRequestParameterException(String, String)</Name>
      <Type>Constructor</Type>
      <Scope>MissingPortletRequestParameterException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/bind/MissingPortletRequestParameterException.html</Path>
    <Anchor>MissingPortletRequestParameterException(java.lang.String, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MissingRequiredPropertiesException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.core.env</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/env/MissingRequiredPropertiesException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MissingRequiredPropertiesException()</Name>
      <Type>Constructor</Type>
      <Scope>MissingRequiredPropertiesException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/env/MissingRequiredPropertiesException.html</Path>
    <Anchor>MissingRequiredPropertiesException()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MissingServletRequestParameterException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.web.bind</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/bind/MissingServletRequestParameterException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MissingServletRequestParameterException(String, String)</Name>
      <Type>Constructor</Type>
      <Scope>MissingServletRequestParameterException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/bind/MissingServletRequestParameterException.html</Path>
    <Anchor>MissingServletRequestParameterException(java.lang.String, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MissingServletRequestPartException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.web.multipart.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/support/MissingServletRequestPartException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MissingServletRequestPartException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MissingServletRequestPartException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/support/MissingServletRequestPartException.html</Path>
    <Anchor>MissingServletRequestPartException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MOCK_PROPERTIES_PROPERTY_SOURCE_NAME</Name>
      <Type>Field</Type>
      <Scope>MockPropertySource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/env/MockPropertySource.html</Path>
    <Anchor>MOCK_PROPERTIES_PROPERTY_SOURCE_NAME</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockActionRequest</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockActionRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockActionRequest()</Name>
      <Type>Constructor</Type>
      <Scope>MockActionRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockActionRequest.html</Path>
    <Anchor>MockActionRequest()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockActionRequest(String)</Name>
      <Type>Constructor</Type>
      <Scope>MockActionRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockActionRequest.html</Path>
    <Anchor>MockActionRequest(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockActionRequest(PortletMode)</Name>
      <Type>Constructor</Type>
      <Scope>MockActionRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockActionRequest.html</Path>
    <Anchor>MockActionRequest(javax.portlet.PortletMode)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockActionRequest(PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockActionRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockActionRequest.html</Path>
    <Anchor>MockActionRequest(javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockActionRequest(PortalContext, PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockActionRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockActionRequest.html</Path>
    <Anchor>MockActionRequest(javax.portlet.PortalContext, javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockActionResponse</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockActionResponse.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockActionResponse()</Name>
      <Type>Constructor</Type>
      <Scope>MockActionResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockActionResponse.html</Path>
    <Anchor>MockActionResponse()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockActionResponse(PortalContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockActionResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockActionResponse.html</Path>
    <Anchor>MockActionResponse(javax.portlet.PortalContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockBaseURL</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockBaseURL.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockBaseURL()</Name>
      <Type>Constructor</Type>
      <Scope>MockBaseURL</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockBaseURL.html</Path>
    <Anchor>MockBaseURL()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockBodyContent</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockBodyContent.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockBodyContent(String, HttpServletResponse)</Name>
      <Type>Constructor</Type>
      <Scope>MockBodyContent</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockBodyContent.html</Path>
    <Anchor>MockBodyContent(java.lang.String, javax.servlet.http.HttpServletResponse)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockBodyContent(String, Writer)</Name>
      <Type>Constructor</Type>
      <Scope>MockBodyContent</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockBodyContent.html</Path>
    <Anchor>MockBodyContent(java.lang.String, java.io.Writer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockBodyContent(String, HttpServletResponse, Writer)</Name>
      <Type>Constructor</Type>
      <Scope>MockBodyContent</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockBodyContent.html</Path>
    <Anchor>MockBodyContent(java.lang.String, javax.servlet.http.HttpServletResponse, java.io.Writer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockCacheControl</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockCacheControl.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockCacheControl()</Name>
      <Type>Constructor</Type>
      <Scope>MockCacheControl</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockCacheControl.html</Path>
    <Anchor>MockCacheControl()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockClientDataRequest</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockClientDataRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockClientDataRequest()</Name>
      <Type>Constructor</Type>
      <Scope>MockClientDataRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockClientDataRequest.html</Path>
    <Anchor>MockClientDataRequest()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockClientDataRequest(PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockClientDataRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockClientDataRequest.html</Path>
    <Anchor>MockClientDataRequest(javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockClientDataRequest(PortalContext, PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockClientDataRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockClientDataRequest.html</Path>
    <Anchor>MockClientDataRequest(javax.portlet.PortalContext, javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockClientHttpRequest</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.http.client</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/http/client/MockClientHttpRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockClientHttpRequest()</Name>
      <Type>Constructor</Type>
      <Scope>MockClientHttpRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/http/client/MockClientHttpRequest.html</Path>
    <Anchor>MockClientHttpRequest()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockClientHttpRequest(HttpMethod, URI)</Name>
      <Type>Constructor</Type>
      <Scope>MockClientHttpRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/http/client/MockClientHttpRequest.html</Path>
    <Anchor>MockClientHttpRequest(org.springframework.http.HttpMethod, java.net.URI)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockClientHttpResponse</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.http.client</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/http/client/MockClientHttpResponse.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockClientHttpResponse(byte[], HttpStatus)</Name>
      <Type>Constructor</Type>
      <Scope>MockClientHttpResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/http/client/MockClientHttpResponse.html</Path>
    <Anchor>MockClientHttpResponse(byte[], org.springframework.http.HttpStatus)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockClientHttpResponse(InputStream, HttpStatus)</Name>
      <Type>Constructor</Type>
      <Scope>MockClientHttpResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/http/client/MockClientHttpResponse.html</Path>
    <Anchor>MockClientHttpResponse(java.io.InputStream, org.springframework.http.HttpStatus)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEnvironment</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.env</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/env/MockEnvironment.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEnvironment()</Name>
      <Type>Constructor</Type>
      <Scope>MockEnvironment</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/env/MockEnvironment.html</Path>
    <Anchor>MockEnvironment()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEvent</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockEvent.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEvent(QName)</Name>
      <Type>Constructor</Type>
      <Scope>MockEvent</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockEvent.html</Path>
    <Anchor>MockEvent(javax.xml.namespace.QName)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEvent(QName, Serializable)</Name>
      <Type>Constructor</Type>
      <Scope>MockEvent</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockEvent.html</Path>
    <Anchor>MockEvent(javax.xml.namespace.QName, java.io.Serializable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEvent(String)</Name>
      <Type>Constructor</Type>
      <Scope>MockEvent</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockEvent.html</Path>
    <Anchor>MockEvent(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEvent(String, Serializable)</Name>
      <Type>Constructor</Type>
      <Scope>MockEvent</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockEvent.html</Path>
    <Anchor>MockEvent(java.lang.String, java.io.Serializable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEventRequest</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockEventRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEventRequest(Event)</Name>
      <Type>Constructor</Type>
      <Scope>MockEventRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockEventRequest.html</Path>
    <Anchor>MockEventRequest(javax.portlet.Event)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEventRequest(Event, PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockEventRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockEventRequest.html</Path>
    <Anchor>MockEventRequest(javax.portlet.Event, javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEventRequest(Event, PortalContext, PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockEventRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockEventRequest.html</Path>
    <Anchor>MockEventRequest(javax.portlet.Event, javax.portlet.PortalContext, javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEventResponse</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockEventResponse.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockEventResponse()</Name>
      <Type>Constructor</Type>
      <Scope>MockEventResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockEventResponse.html</Path>
    <Anchor>MockEventResponse()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockExpressionEvaluator</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockExpressionEvaluator.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockExpressionEvaluator(PageContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockExpressionEvaluator</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockExpressionEvaluator.html</Path>
    <Anchor>MockExpressionEvaluator(javax.servlet.jsp.PageContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockFilterChain</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockFilterChain.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockFilterChain()</Name>
      <Type>Constructor</Type>
      <Scope>MockFilterChain</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockFilterChain.html</Path>
    <Anchor>MockFilterChain()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockFilterChain(Servlet)</Name>
      <Type>Constructor</Type>
      <Scope>MockFilterChain</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockFilterChain.html</Path>
    <Anchor>MockFilterChain(javax.servlet.Servlet)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockFilterChain(Servlet, Filter...)</Name>
      <Type>Constructor</Type>
      <Scope>MockFilterChain</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockFilterChain.html</Path>
    <Anchor>MockFilterChain(javax.servlet.Servlet, javax.servlet.Filter...)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockFilterConfig</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockFilterConfig.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockFilterConfig()</Name>
      <Type>Constructor</Type>
      <Scope>MockFilterConfig</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockFilterConfig.html</Path>
    <Anchor>MockFilterConfig()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockFilterConfig(String)</Name>
      <Type>Constructor</Type>
      <Scope>MockFilterConfig</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockFilterConfig.html</Path>
    <Anchor>MockFilterConfig(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockFilterConfig(ServletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockFilterConfig</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockFilterConfig.html</Path>
    <Anchor>MockFilterConfig(javax.servlet.ServletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockFilterConfig(ServletContext, String)</Name>
      <Type>Constructor</Type>
      <Scope>MockFilterConfig</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockFilterConfig.html</Path>
    <Anchor>MockFilterConfig(javax.servlet.ServletContext, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpInputMessage</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.http</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/http/MockHttpInputMessage.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpInputMessage(byte[])</Name>
      <Type>Constructor</Type>
      <Scope>MockHttpInputMessage</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/http/MockHttpInputMessage.html</Path>
    <Anchor>MockHttpInputMessage(byte[])</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpInputMessage(InputStream)</Name>
      <Type>Constructor</Type>
      <Scope>MockHttpInputMessage</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/http/MockHttpInputMessage.html</Path>
    <Anchor>MockHttpInputMessage(java.io.InputStream)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpOutputMessage</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.http</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/http/MockHttpOutputMessage.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpOutputMessage()</Name>
      <Type>Constructor</Type>
      <Scope>MockHttpOutputMessage</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/http/MockHttpOutputMessage.html</Path>
    <Anchor>MockHttpOutputMessage()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpServletRequest</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockHttpServletRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpServletRequest()</Name>
      <Type>Constructor</Type>
      <Scope>MockHttpServletRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockHttpServletRequest.html</Path>
    <Anchor>MockHttpServletRequest()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpServletRequest(String, String)</Name>
      <Type>Constructor</Type>
      <Scope>MockHttpServletRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockHttpServletRequest.html</Path>
    <Anchor>MockHttpServletRequest(java.lang.String, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpServletRequest(ServletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockHttpServletRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockHttpServletRequest.html</Path>
    <Anchor>MockHttpServletRequest(javax.servlet.ServletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpServletRequest(ServletContext, String, String)</Name>
      <Type>Constructor</Type>
      <Scope>MockHttpServletRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockHttpServletRequest.html</Path>
    <Anchor>MockHttpServletRequest(javax.servlet.ServletContext, java.lang.String, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpServletRequestBuilder</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.servlet.request</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/request/MockHttpServletRequestBuilder.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpServletResponse</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockHttpServletResponse.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpServletResponse()</Name>
      <Type>Constructor</Type>
      <Scope>MockHttpServletResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockHttpServletResponse.html</Path>
    <Anchor>MockHttpServletResponse()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpSession</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockHttpSession.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpSession()</Name>
      <Type>Constructor</Type>
      <Scope>MockHttpSession</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockHttpSession.html</Path>
    <Anchor>MockHttpSession()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpSession(ServletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockHttpSession</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockHttpSession.html</Path>
    <Anchor>MockHttpSession(javax.servlet.ServletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockHttpSession(ServletContext, String)</Name>
      <Type>Constructor</Type>
      <Scope>MockHttpSession</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockHttpSession.html</Path>
    <Anchor>MockHttpSession(javax.servlet.ServletContext, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockJspWriter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockJspWriter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockJspWriter(HttpServletResponse)</Name>
      <Type>Constructor</Type>
      <Scope>MockJspWriter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockJspWriter.html</Path>
    <Anchor>MockJspWriter(javax.servlet.http.HttpServletResponse)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockJspWriter(Writer)</Name>
      <Type>Constructor</Type>
      <Scope>MockJspWriter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockJspWriter.html</Path>
    <Anchor>MockJspWriter(java.io.Writer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockJspWriter(HttpServletResponse, Writer)</Name>
      <Type>Constructor</Type>
      <Scope>MockJspWriter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockJspWriter.html</Path>
    <Anchor>MockJspWriter(javax.servlet.http.HttpServletResponse, java.io.Writer)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMimeResponse</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockMimeResponse.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMimeResponse()</Name>
      <Type>Constructor</Type>
      <Scope>MockMimeResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockMimeResponse.html</Path>
    <Anchor>MockMimeResponse()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMimeResponse(PortalContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockMimeResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockMimeResponse.html</Path>
    <Anchor>MockMimeResponse(javax.portlet.PortalContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMimeResponse(PortalContext, PortletRequest)</Name>
      <Type>Constructor</Type>
      <Scope>MockMimeResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockMimeResponse.html</Path>
    <Anchor>MockMimeResponse(javax.portlet.PortalContext, javax.portlet.PortletRequest)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMultipartActionRequest</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockMultipartActionRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMultipartActionRequest()</Name>
      <Type>Constructor</Type>
      <Scope>MockMultipartActionRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockMultipartActionRequest.html</Path>
    <Anchor>MockMultipartActionRequest()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMultipartFile</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockMultipartFile.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMultipartFile(String, byte[])</Name>
      <Type>Constructor</Type>
      <Scope>MockMultipartFile</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockMultipartFile.html</Path>
    <Anchor>MockMultipartFile(java.lang.String, byte[])</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMultipartFile(String, InputStream)</Name>
      <Type>Constructor</Type>
      <Scope>MockMultipartFile</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockMultipartFile.html</Path>
    <Anchor>MockMultipartFile(java.lang.String, java.io.InputStream)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMultipartFile(String, String, String, byte[])</Name>
      <Type>Constructor</Type>
      <Scope>MockMultipartFile</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockMultipartFile.html</Path>
    <Anchor>MockMultipartFile(java.lang.String, java.lang.String, java.lang.String, byte[])</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMultipartFile(String, String, String, InputStream)</Name>
      <Type>Constructor</Type>
      <Scope>MockMultipartFile</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockMultipartFile.html</Path>
    <Anchor>MockMultipartFile(java.lang.String, java.lang.String, java.lang.String, java.io.InputStream)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMultipartHttpServletRequest</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockMultipartHttpServletRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMultipartHttpServletRequest()</Name>
      <Type>Constructor</Type>
      <Scope>MockMultipartHttpServletRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockMultipartHttpServletRequest.html</Path>
    <Anchor>MockMultipartHttpServletRequest()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMultipartHttpServletRequestBuilder</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.servlet.request</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/request/MockMultipartHttpServletRequestBuilder.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMvc</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.servlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/MockMvc.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMvcBuilder</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.test.web.servlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/MockMvcBuilder.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMvcBuilders</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.servlet.setup</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/setup/MockMvcBuilders.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMvcBuilders()</Name>
      <Type>Constructor</Type>
      <Scope>MockMvcBuilders</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/setup/MockMvcBuilders.html</Path>
    <Anchor>MockMvcBuilders()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMvcBuilderSupport</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.servlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/MockMvcBuilderSupport.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMvcBuilderSupport()</Name>
      <Type>Constructor</Type>
      <Scope>MockMvcBuilderSupport</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/MockMvcBuilderSupport.html</Path>
    <Anchor>MockMvcBuilderSupport()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMvcClientHttpRequestFactory</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.client</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMvcClientHttpRequestFactory(MockMvc)</Name>
      <Type>Constructor</Type>
      <Scope>MockMvcClientHttpRequestFactory</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/client/MockMvcClientHttpRequestFactory.html</Path>
    <Anchor>MockMvcClientHttpRequestFactory(org.springframework.test.web.servlet.MockMvc)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMvcRequestBuilders</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.servlet.request</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMvcResultHandlers</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.servlet.result</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/result/MockMvcResultHandlers.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockMvcResultMatchers</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.servlet.result</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPageContext</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockPageContext.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPageContext()</Name>
      <Type>Constructor</Type>
      <Scope>MockPageContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockPageContext.html</Path>
    <Anchor>MockPageContext()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPageContext(ServletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockPageContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockPageContext.html</Path>
    <Anchor>MockPageContext(javax.servlet.ServletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPageContext(ServletContext, HttpServletRequest)</Name>
      <Type>Constructor</Type>
      <Scope>MockPageContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockPageContext.html</Path>
    <Anchor>MockPageContext(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPageContext(ServletContext, HttpServletRequest, HttpServletResponse)</Name>
      <Type>Constructor</Type>
      <Scope>MockPageContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockPageContext.html</Path>
    <Anchor>MockPageContext(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPageContext(ServletContext, HttpServletRequest, HttpServletResponse, ServletConfig)</Name>
      <Type>Constructor</Type>
      <Scope>MockPageContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockPageContext.html</Path>
    <Anchor>MockPageContext(javax.servlet.ServletContext, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletConfig)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortalContext</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortalContext.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortalContext()</Name>
      <Type>Constructor</Type>
      <Scope>MockPortalContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortalContext.html</Path>
    <Anchor>MockPortalContext()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortalContext(List&amp;lt;PortletMode&amp;gt;, List&amp;lt;WindowState&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortalContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortalContext.html</Path>
    <Anchor>MockPortalContext(java.util.List, java.util.List)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletConfig</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletConfig.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletConfig()</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletConfig</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletConfig.html</Path>
    <Anchor>MockPortletConfig()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletConfig(String)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletConfig</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletConfig.html</Path>
    <Anchor>MockPortletConfig(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletConfig(PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletConfig</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletConfig.html</Path>
    <Anchor>MockPortletConfig(javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletConfig(PortletContext, String)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletConfig</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletConfig.html</Path>
    <Anchor>MockPortletConfig(javax.portlet.PortletContext, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletContext</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletContext.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletContext()</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletContext.html</Path>
    <Anchor>MockPortletContext()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletContext(String)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletContext.html</Path>
    <Anchor>MockPortletContext(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletContext(ResourceLoader)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletContext.html</Path>
    <Anchor>MockPortletContext(org.springframework.core.io.ResourceLoader)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletContext(String, ResourceLoader)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletContext.html</Path>
    <Anchor>MockPortletContext(java.lang.String, org.springframework.core.io.ResourceLoader)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletPreferences</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletPreferences.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletPreferences()</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletPreferences</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletPreferences.html</Path>
    <Anchor>MockPortletPreferences()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletRequest</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletRequest()</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletRequest.html</Path>
    <Anchor>MockPortletRequest()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletRequest(PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletRequest.html</Path>
    <Anchor>MockPortletRequest(javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletRequest(PortalContext, PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletRequest.html</Path>
    <Anchor>MockPortletRequest(javax.portlet.PortalContext, javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletRequestDispatcher</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletRequestDispatcher.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletRequestDispatcher(String)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletRequestDispatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletRequestDispatcher.html</Path>
    <Anchor>MockPortletRequestDispatcher(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletResponse</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletResponse.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletResponse()</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletResponse.html</Path>
    <Anchor>MockPortletResponse()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletResponse(PortalContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletResponse.html</Path>
    <Anchor>MockPortletResponse(javax.portlet.PortalContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletSession</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletSession.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletSession()</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletSession</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletSession.html</Path>
    <Anchor>MockPortletSession()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletSession(PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletSession</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletSession.html</Path>
    <Anchor>MockPortletSession(javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletURL</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletURL.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPortletURL(PortalContext, String)</Name>
      <Type>Constructor</Type>
      <Scope>MockPortletURL</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockPortletURL.html</Path>
    <Anchor>MockPortletURL(javax.portlet.PortalContext, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPropertySource</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.env</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/env/MockPropertySource.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPropertySource()</Name>
      <Type>Constructor</Type>
      <Scope>MockPropertySource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/env/MockPropertySource.html</Path>
    <Anchor>MockPropertySource()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPropertySource(String)</Name>
      <Type>Constructor</Type>
      <Scope>MockPropertySource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/env/MockPropertySource.html</Path>
    <Anchor>MockPropertySource(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPropertySource(Properties)</Name>
      <Type>Constructor</Type>
      <Scope>MockPropertySource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/env/MockPropertySource.html</Path>
    <Anchor>MockPropertySource(java.util.Properties)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockPropertySource(String, Properties)</Name>
      <Type>Constructor</Type>
      <Scope>MockPropertySource</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/env/MockPropertySource.html</Path>
    <Anchor>MockPropertySource(java.lang.String, java.util.Properties)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRenderRequest</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockRenderRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRenderRequest()</Name>
      <Type>Constructor</Type>
      <Scope>MockRenderRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockRenderRequest.html</Path>
    <Anchor>MockRenderRequest()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRenderRequest(PortletMode)</Name>
      <Type>Constructor</Type>
      <Scope>MockRenderRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockRenderRequest.html</Path>
    <Anchor>MockRenderRequest(javax.portlet.PortletMode)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRenderRequest(PortletMode, WindowState)</Name>
      <Type>Constructor</Type>
      <Scope>MockRenderRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockRenderRequest.html</Path>
    <Anchor>MockRenderRequest(javax.portlet.PortletMode, javax.portlet.WindowState)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRenderRequest(PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockRenderRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockRenderRequest.html</Path>
    <Anchor>MockRenderRequest(javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRenderRequest(PortalContext, PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockRenderRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockRenderRequest.html</Path>
    <Anchor>MockRenderRequest(javax.portlet.PortalContext, javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRenderResponse</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockRenderResponse.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRenderResponse()</Name>
      <Type>Constructor</Type>
      <Scope>MockRenderResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockRenderResponse.html</Path>
    <Anchor>MockRenderResponse()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRenderResponse(PortalContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockRenderResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockRenderResponse.html</Path>
    <Anchor>MockRenderResponse(javax.portlet.PortalContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRenderResponse(PortalContext, RenderRequest)</Name>
      <Type>Constructor</Type>
      <Scope>MockRenderResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockRenderResponse.html</Path>
    <Anchor>MockRenderResponse(javax.portlet.PortalContext, javax.portlet.RenderRequest)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRequestDispatcher</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockRequestDispatcher.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRequestDispatcher(String)</Name>
      <Type>Constructor</Type>
      <Scope>MockRequestDispatcher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockRequestDispatcher.html</Path>
    <Anchor>MockRequestDispatcher(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockResourceRequest</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockResourceRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockResourceRequest()</Name>
      <Type>Constructor</Type>
      <Scope>MockResourceRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockResourceRequest.html</Path>
    <Anchor>MockResourceRequest()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockResourceRequest(String)</Name>
      <Type>Constructor</Type>
      <Scope>MockResourceRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockResourceRequest.html</Path>
    <Anchor>MockResourceRequest(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockResourceRequest(MockResourceURL)</Name>
      <Type>Constructor</Type>
      <Scope>MockResourceRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockResourceRequest.html</Path>
    <Anchor>MockResourceRequest(org.springframework.mock.web.portlet.MockResourceURL)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockResourceRequest(PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockResourceRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockResourceRequest.html</Path>
    <Anchor>MockResourceRequest(javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockResourceRequest(PortalContext, PortletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockResourceRequest</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockResourceRequest.html</Path>
    <Anchor>MockResourceRequest(javax.portlet.PortalContext, javax.portlet.PortletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockResourceResponse</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockResourceResponse.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockResourceResponse()</Name>
      <Type>Constructor</Type>
      <Scope>MockResourceResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockResourceResponse.html</Path>
    <Anchor>MockResourceResponse()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockResourceURL</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockResourceURL.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockResourceURL()</Name>
      <Type>Constructor</Type>
      <Scope>MockResourceURL</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockResourceURL.html</Path>
    <Anchor>MockResourceURL()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRestRequestMatchers</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.client.match</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/client/match/MockRestRequestMatchers.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRestResponseCreators</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.client.response</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/client/response/MockRestResponseCreators.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockRestServiceServer</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.client</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/client/MockRestServiceServer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockServletConfig</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockServletConfig.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockServletConfig()</Name>
      <Type>Constructor</Type>
      <Scope>MockServletConfig</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockServletConfig.html</Path>
    <Anchor>MockServletConfig()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockServletConfig(String)</Name>
      <Type>Constructor</Type>
      <Scope>MockServletConfig</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockServletConfig.html</Path>
    <Anchor>MockServletConfig(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockServletConfig(ServletContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockServletConfig</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockServletConfig.html</Path>
    <Anchor>MockServletConfig(javax.servlet.ServletContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockServletConfig(ServletContext, String)</Name>
      <Type>Constructor</Type>
      <Scope>MockServletConfig</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockServletConfig.html</Path>
    <Anchor>MockServletConfig(javax.servlet.ServletContext, java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockServletContext</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockServletContext.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockServletContext()</Name>
      <Type>Constructor</Type>
      <Scope>MockServletContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockServletContext.html</Path>
    <Anchor>MockServletContext()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockServletContext(String)</Name>
      <Type>Constructor</Type>
      <Scope>MockServletContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockServletContext.html</Path>
    <Anchor>MockServletContext(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockServletContext(ResourceLoader)</Name>
      <Type>Constructor</Type>
      <Scope>MockServletContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockServletContext.html</Path>
    <Anchor>MockServletContext(org.springframework.core.io.ResourceLoader)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockServletContext(String, ResourceLoader)</Name>
      <Type>Constructor</Type>
      <Scope>MockServletContext</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/MockServletContext.html</Path>
    <Anchor>MockServletContext(java.lang.String, org.springframework.core.io.ResourceLoader)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockStateAwareResponse</Name>
      <Type>cl</Type>
      <Scope>org.springframework.mock.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockStateAwareResponse.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockStateAwareResponse()</Name>
      <Type>Constructor</Type>
      <Scope>MockStateAwareResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockStateAwareResponse.html</Path>
    <Anchor>MockStateAwareResponse()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockStateAwareResponse(PortalContext)</Name>
      <Type>Constructor</Type>
      <Scope>MockStateAwareResponse</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/web/portlet/MockStateAwareResponse.html</Path>
    <Anchor>MockStateAwareResponse(javax.portlet.PortalContext)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MockStaticEntityMethods</Name>
      <Type>clm</Type>
      <Scope>org.springframework.mock.staticmock</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mock/staticmock/MockStaticEntityMethods.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>model()</Name>
      <Type>clm</Type>
      <Scope>MockMvcResultMatchers</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/result/MockMvcResultMatchers.html</Path>
    <Anchor>model()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Model</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.ui</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/ui/Model.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MODEL_ATTRIBUTE</Name>
      <Type>Field</Type>
      <Scope>ViewRendererServlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/ViewRendererServlet.html</Path>
    <Anchor>MODEL_ATTRIBUTE</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MODEL_ATTRIBUTE_METHODS</Name>
      <Type>Field</Type>
      <Scope>RequestMappingHandlerAdapter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.html</Path>
    <Anchor>MODEL_ATTRIBUTE_METHODS</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MODEL_ATTRIBUTE_VARIABLE_NAME</Name>
      <Type>Field</Type>
      <Scope>FormTag</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/tags/form/FormTag.html</Path>
    <Anchor>MODEL_ATTRIBUTE_VARIABLE_NAME</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MODEL_KEY_PREFIX</Name>
      <Type>Field</Type>
      <Scope>BindingResult</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/validation/BindingResult.html</Path>
    <Anchor>MODEL_KEY_PREFIX</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/ModelAndView.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView()</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/ModelAndView.html</Path>
    <Anchor>ModelAndView()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView(String)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/ModelAndView.html</Path>
    <Anchor>ModelAndView(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView(Object)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/ModelAndView.html</Path>
    <Anchor>ModelAndView(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView(String, Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/ModelAndView.html</Path>
    <Anchor>ModelAndView(java.lang.String, java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView(Object, Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/ModelAndView.html</Path>
    <Anchor>ModelAndView(java.lang.Object, java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView(String, String, Object)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/ModelAndView.html</Path>
    <Anchor>ModelAndView(java.lang.String, java.lang.String, java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView(Object, String, Object)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/ModelAndView.html</Path>
    <Anchor>ModelAndView(java.lang.Object, java.lang.String, java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.servlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/ModelAndView.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView()</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/ModelAndView.html</Path>
    <Anchor>ModelAndView()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView(String)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/ModelAndView.html</Path>
    <Anchor>ModelAndView(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView(View)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/ModelAndView.html</Path>
    <Anchor>ModelAndView(org.springframework.web.servlet.View)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView(String, Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/ModelAndView.html</Path>
    <Anchor>ModelAndView(java.lang.String, java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView(View, Map&amp;lt;String, ?&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/ModelAndView.html</Path>
    <Anchor>ModelAndView(org.springframework.web.servlet.View, java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView(String, String, Object)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/ModelAndView.html</Path>
    <Anchor>ModelAndView(java.lang.String, java.lang.String, java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndView(View, String, Object)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndView</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/ModelAndView.html</Path>
    <Anchor>ModelAndView(org.springframework.web.servlet.View, java.lang.String, java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewAssert</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/ModelAndViewAssert.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewAssert()</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndViewAssert</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/ModelAndViewAssert.html</Path>
    <Anchor>ModelAndViewAssert()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewContainer</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.method.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/method/support/ModelAndViewContainer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewContainer()</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndViewContainer</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/method/support/ModelAndViewContainer.html</Path>
    <Anchor>ModelAndViewContainer()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewDefiningException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.web.portlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/ModelAndViewDefiningException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewDefiningException(ModelAndView)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndViewDefiningException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/ModelAndViewDefiningException.html</Path>
    <Anchor>ModelAndViewDefiningException(org.springframework.web.portlet.ModelAndView)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewDefiningException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.web.servlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/ModelAndViewDefiningException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewDefiningException(ModelAndView)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndViewDefiningException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/ModelAndViewDefiningException.html</Path>
    <Anchor>ModelAndViewDefiningException(org.springframework.web.servlet.ModelAndView)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewMethodReturnValueHandler</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.servlet.mvc.method.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandler.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewMethodReturnValueHandler()</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndViewMethodReturnValueHandler</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewMethodReturnValueHandler.html</Path>
    <Anchor>ModelAndViewMethodReturnValueHandler()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewResolver</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.web.servlet.mvc.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/annotation/ModelAndViewResolver.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewResolverMethodReturnValueHandler</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.servlet.mvc.method.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewResolverMethodReturnValueHandler.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAndViewResolverMethodReturnValueHandler(List&amp;lt;ModelAndViewResolver&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAndViewResolverMethodReturnValueHandler</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/method/annotation/ModelAndViewResolverMethodReturnValueHandler.html</Path>
    <Anchor>ModelAndViewResolverMethodReturnValueHandler(java.util.List)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAttribute</Name>
      <Type>clm</Type>
      <Scope>org.springframework.web.bind.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/bind/annotation/ModelAttribute.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAttributeMethodProcessor</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.method.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelAttributeMethodProcessor(boolean)</Name>
      <Type>Constructor</Type>
      <Scope>ModelAttributeMethodProcessor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/method/annotation/ModelAttributeMethodProcessor.html</Path>
    <Anchor>ModelAttributeMethodProcessor(boolean)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelFactory</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.method.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/method/annotation/ModelFactory.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelFactory(List&amp;lt;InvocableHandlerMethod&amp;gt;, WebDataBinderFactory, SessionAttributesHandler)</Name>
      <Type>Constructor</Type>
      <Scope>ModelFactory</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/method/annotation/ModelFactory.html</Path>
    <Anchor>ModelFactory(java.util.List, org.springframework.web.bind.support.WebDataBinderFactory, org.springframework.web.method.annotation.SessionAttributesHandler)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelMap</Name>
      <Type>cl</Type>
      <Scope>org.springframework.ui</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/ui/ModelMap.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelMap()</Name>
      <Type>Constructor</Type>
      <Scope>ModelMap</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/ui/ModelMap.html</Path>
    <Anchor>ModelMap()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelMap(String, Object)</Name>
      <Type>Constructor</Type>
      <Scope>ModelMap</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/ui/ModelMap.html</Path>
    <Anchor>ModelMap(java.lang.String, java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelMap(Object)</Name>
      <Type>Constructor</Type>
      <Scope>ModelMap</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/ui/ModelMap.html</Path>
    <Anchor>ModelMap(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelMBeanNotificationPublisher</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jmx.export.notification</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/notification/ModelMBeanNotificationPublisher.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelMBeanNotificationPublisher(ModelMBeanNotificationBroadcaster, ObjectName, Object)</Name>
      <Type>Constructor</Type>
      <Scope>ModelMBeanNotificationPublisher</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jmx/export/notification/ModelMBeanNotificationPublisher.html</Path>
    <Anchor>ModelMBeanNotificationPublisher(javax.management.modelmbean.ModelMBeanNotificationBroadcaster, javax.management.ObjectName, java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelMethodProcessor</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.method.annotation</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/method/annotation/ModelMethodProcessor.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelMethodProcessor()</Name>
      <Type>Constructor</Type>
      <Scope>ModelMethodProcessor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/method/annotation/ModelMethodProcessor.html</Path>
    <Anchor>ModelMethodProcessor()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelResultMatchers</Name>
      <Type>cl</Type>
      <Scope>org.springframework.test.web.servlet.result</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/result/ModelResultMatchers.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ModelResultMatchers()</Name>
      <Type>Constructor</Type>
      <Scope>ModelResultMatchers</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/result/ModelResultMatchers.html</Path>
    <Anchor>ModelResultMatchers()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modifyLocations(Class&amp;lt;?&amp;gt;, String...)</Name>
      <Type>instm</Type>
      <Scope>AbstractContextLoader</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/context/support/AbstractContextLoader.html</Path>
    <Anchor>modifyLocations(java.lang.Class, java.lang.String...)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modifyLocations(Class&amp;lt;?&amp;gt;, String...)</Name>
      <Type>instm</Type>
      <Scope>AnnotationConfigContextLoader</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/context/support/AnnotationConfigContextLoader.html</Path>
    <Anchor>modifyLocations(java.lang.Class, java.lang.String...)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>modifyLocations(Class&amp;lt;?&amp;gt;, String...)</Name>
      <Type>instm</Type>
      <Scope>AnnotationConfigWebContextLoader</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/context/web/AnnotationConfigWebContextLoader.html</Path>
    <Anchor>modifyLocations(java.lang.Class, java.lang.String...)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>monitor(Object, WeakReferenceMonitor.ReleaseListener)</Name>
      <Type>clm</Type>
      <Scope>WeakReferenceMonitor</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/WeakReferenceMonitor.html</Path>
    <Anchor>monitor(java.lang.Object, org.springframework.util.WeakReferenceMonitor.ReleaseListener)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MULTI_VALUE_ATTRIBUTE_DELIMITERS</Name>
      <Type>Field</Type>
      <Scope>BeanDefinitionParserDelegate</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.html</Path>
    <Anchor>MULTI_VALUE_ATTRIBUTE_DELIMITERS</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultiActionController</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.servlet.mvc.multiaction</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/multiaction/MultiActionController.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultiActionController()</Name>
      <Type>Constructor</Type>
      <Scope>MultiActionController</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/multiaction/MultiActionController.html</Path>
    <Anchor>MultiActionController()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultiActionController(Object)</Name>
      <Type>Constructor</Type>
      <Scope>MultiActionController</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/mvc/multiaction/MultiActionController.html</Path>
    <Anchor>MultiActionController(java.lang.Object)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>multicastEvent(ApplicationEvent)</Name>
      <Type>intfm</Type>
      <Scope>ApplicationEventMulticaster</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/event/ApplicationEventMulticaster.html</Path>
    <Anchor>multicastEvent(org.springframework.context.ApplicationEvent)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>multicastEvent(ApplicationEvent)</Name>
      <Type>instm</Type>
      <Scope>SimpleApplicationEventMulticaster</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/context/event/SimpleApplicationEventMulticaster.html</Path>
    <Anchor>multicastEvent(org.springframework.context.ApplicationEvent)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MULTIPART_FORM_DATA</Name>
      <Type>Field</Type>
      <Scope>MediaType</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/MediaType.html</Path>
    <Anchor>MULTIPART_FORM_DATA</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MULTIPART_FORM_DATA_VALUE</Name>
      <Type>Field</Type>
      <Scope>MediaType</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/http/MediaType.html</Path>
    <Anchor>MULTIPART_FORM_DATA_VALUE</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MULTIPART_MODE_MIXED</Name>
      <Type>Field</Type>
      <Scope>MimeMessageHelper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMessageHelper.html</Path>
    <Anchor>MULTIPART_MODE_MIXED</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MULTIPART_MODE_MIXED_RELATED</Name>
      <Type>Field</Type>
      <Scope>MimeMessageHelper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMessageHelper.html</Path>
    <Anchor>MULTIPART_MODE_MIXED_RELATED</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MULTIPART_MODE_NO</Name>
      <Type>Field</Type>
      <Scope>MimeMessageHelper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMessageHelper.html</Path>
    <Anchor>MULTIPART_MODE_NO</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MULTIPART_MODE_RELATED</Name>
      <Type>Field</Type>
      <Scope>MimeMessageHelper</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/mail/javamail/MimeMessageHelper.html</Path>
    <Anchor>MULTIPART_MODE_RELATED</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MULTIPART_RESOLVER_BEAN_NAME</Name>
      <Type>Field</Type>
      <Scope>DispatcherPortlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/DispatcherPortlet.html</Path>
    <Anchor>MULTIPART_RESOLVER_BEAN_NAME</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MULTIPART_RESOLVER_BEAN_NAME</Name>
      <Type>Field</Type>
      <Scope>DispatcherServlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/DispatcherServlet.html</Path>
    <Anchor>MULTIPART_RESOLVER_BEAN_NAME</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipartActionRequest</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.web.portlet.multipart</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/portlet/multipart/MultipartActionRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipartException</Name>
      <Type>Exception</Type>
      <Scope>org.springframework.web.multipart</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/MultipartException.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipartException(String)</Name>
      <Type>Constructor</Type>
      <Scope>MultipartException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/MultipartException.html</Path>
    <Anchor>MultipartException(java.lang.String)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipartException(String, Throwable)</Name>
      <Type>Constructor</Type>
      <Scope>MultipartException</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/MultipartException.html</Path>
    <Anchor>MultipartException(java.lang.String, java.lang.Throwable)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipartFile</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.web.multipart</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/MultipartFile.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipartFilter</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.multipart.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/support/MultipartFilter.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipartFilter()</Name>
      <Type>Constructor</Type>
      <Scope>MultipartFilter</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/support/MultipartFilter.html</Path>
    <Anchor>MultipartFilter()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipartHttpServletRequest</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.web.multipart</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/MultipartHttpServletRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipartRequest</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.web.multipart</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/MultipartRequest.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultipartResolver</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.web.multipart</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/multipart/MultipartResolver.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MultiValueMap</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.util</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/util/MultiValueMap.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutablePersistenceUnitInfo</Name>
      <Type>cl</Type>
      <Scope>org.springframework.orm.jpa.persistenceunit</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/orm/jpa/persistenceunit/MutablePersistenceUnitInfo.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutablePersistenceUnitInfo()</Name>
      <Type>Constructor</Type>
      <Scope>MutablePersistenceUnitInfo</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/orm/jpa/persistenceunit/MutablePersistenceUnitInfo.html</Path>
    <Anchor>MutablePersistenceUnitInfo()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutablePropertySources</Name>
      <Type>cl</Type>
      <Scope>org.springframework.core.env</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/env/MutablePropertySources.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutablePropertySources()</Name>
      <Type>Constructor</Type>
      <Scope>MutablePropertySources</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/env/MutablePropertySources.html</Path>
    <Anchor>MutablePropertySources()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutablePropertySources(PropertySources)</Name>
      <Type>Constructor</Type>
      <Scope>MutablePropertySources</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/core/env/MutablePropertySources.html</Path>
    <Anchor>MutablePropertySources(org.springframework.core.env.PropertySources)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutablePropertyValues</Name>
      <Type>cl</Type>
      <Scope>org.springframework.beans</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/MutablePropertyValues.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutablePropertyValues()</Name>
      <Type>Constructor</Type>
      <Scope>MutablePropertyValues</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/MutablePropertyValues.html</Path>
    <Anchor>MutablePropertyValues()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutablePropertyValues(PropertyValues)</Name>
      <Type>Constructor</Type>
      <Scope>MutablePropertyValues</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/MutablePropertyValues.html</Path>
    <Anchor>MutablePropertyValues(org.springframework.beans.PropertyValues)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutablePropertyValues(Map&amp;lt;?, ?&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>MutablePropertyValues</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/MutablePropertyValues.html</Path>
    <Anchor>MutablePropertyValues(java.util.Map)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutablePropertyValues(List&amp;lt;PropertyValue&amp;gt;)</Name>
      <Type>Constructor</Type>
      <Scope>MutablePropertyValues</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/MutablePropertyValues.html</Path>
    <Anchor>MutablePropertyValues(java.util.List)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutableSortDefinition</Name>
      <Type>cl</Type>
      <Scope>org.springframework.beans.support</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/support/MutableSortDefinition.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutableSortDefinition()</Name>
      <Type>Constructor</Type>
      <Scope>MutableSortDefinition</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/support/MutableSortDefinition.html</Path>
    <Anchor>MutableSortDefinition()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutableSortDefinition(SortDefinition)</Name>
      <Type>Constructor</Type>
      <Scope>MutableSortDefinition</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/support/MutableSortDefinition.html</Path>
    <Anchor>MutableSortDefinition(org.springframework.beans.support.SortDefinition)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutableSortDefinition(String, boolean, boolean)</Name>
      <Type>Constructor</Type>
      <Scope>MutableSortDefinition</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/support/MutableSortDefinition.html</Path>
    <Anchor>MutableSortDefinition(java.lang.String, boolean, boolean)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutableSortDefinition(boolean)</Name>
      <Type>Constructor</Type>
      <Scope>MutableSortDefinition</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/beans/support/MutableSortDefinition.html</Path>
    <Anchor>MutableSortDefinition(boolean)</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mvcContentNegotiationManager()</Name>
      <Type>instm</Type>
      <Scope>WebMvcConfigurationSupport</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.html</Path>
    <Anchor>mvcContentNegotiationManager()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mvcConversionService()</Name>
      <Type>instm</Type>
      <Scope>WebMvcConfigurationSupport</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.html</Path>
    <Anchor>mvcConversionService()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MvcNamespaceHandler</Name>
      <Type>cl</Type>
      <Scope>org.springframework.web.servlet.config</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/config/MvcNamespaceHandler.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MvcNamespaceHandler()</Name>
      <Type>Constructor</Type>
      <Scope>MvcNamespaceHandler</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/config/MvcNamespaceHandler.html</Path>
    <Anchor>MvcNamespaceHandler()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MvcResult</Name>
      <Type>Interface</Type>
      <Scope>org.springframework.test.web.servlet</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/test/web/servlet/MvcResult.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mvcValidator()</Name>
      <Type>instm</Type>
      <Scope>WebMvcConfigurationSupport</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.html</Path>
    <Anchor>mvcValidator()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MySQLMaxValueIncrementer</Name>
      <Type>cl</Type>
      <Scope>org.springframework.jdbc.support.incrementer</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/support/incrementer/MySQLMaxValueIncrementer.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MySQLMaxValueIncrementer()</Name>
      <Type>Constructor</Type>
      <Scope>MySQLMaxValueIncrementer</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/support/incrementer/MySQLMaxValueIncrementer.html</Path>
    <Anchor>MySQLMaxValueIncrementer()</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MySQLMaxValueIncrementer(DataSource, String, String)</Name>
      <Type>Constructor</Type>
      <Scope>MySQLMaxValueIncrementer</Scope>
      <APILanguage>java</APILanguage>
    </TokenIdentifier>
    <Path>api/org/springframework/jdbc/support/incrementer/MySQLMaxValueIncrementer.html</Path>
    <Anchor>MySQLMaxValueIncrementer(javax.sql.DataSource, java.lang.String, java.lang.String)</Anchor>
  </Token>
</Tokens>
